

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 10 18:05:05 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F2321
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 1.40
    60                           ; Generated 01/12/2016 GMT
    61                           ; 
    62                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F2321 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  00097E                     __pidataCOMRAM:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _default_value
    99  00097E  00                 	db	0
   100  00097F  00                 	db	0
   101  000980  00                 	db	0
   102  000981  00                 	db	0
   103  000982  00                 	db	0
   104  000983  00                 	db	0
   105  000984  00                 	db	0
   106  000985  00                 	db	0
   107  000986  20                 	db	32
   108  000987  19                 	db	25
   109  000988  29                 	db	41
   110  000989  29                 	db	41
   111  00098A  00                 	db	0
   112  00098B  08                 	db	8
   113  00098C  89                 	db	137
   114  00098D  FF                 	db	255
   115  00098E  2E                 	db	46
   116  00098F  88                 	db	136
   117  000990  00                 	db	0
   118  000991  00                 	db	0
   119  000992  2F                 	db	47
   120                           
   121                           ;initializer for uart_p2x@F2625
   122  000993  30                 	db	48
   123  000994  31                 	db	49
   124  000995  32                 	db	50
   125  000996  33                 	db	51
   126  000997  34                 	db	52
   127  000998  35                 	db	53
   128  000999  36                 	db	54
   129  00099A  37                 	db	55
   130  00099B  38                 	db	56
   131  00099C  39                 	db	57
   132  00099D  61                 	db	97
   133  00099E  62                 	db	98
   134  00099F  63                 	db	99
   135  0009A0  64                 	db	100
   136  0009A1  65                 	db	101
   137  0009A2  66                 	db	102
   138                           
   139                           	psect	nvCOMRAM
   140  00006C                     __pnvCOMRAM:
   141                           	opt stack 0
   142  00006C                     _total_1ms_tick:
   143                           	opt stack 0
   144  00006C                     	ds	2
   145  0000                     _ADCON1bits	set	4033
   146  0000                     _BAUDCONbits	set	4024
   147  0000                     _EEADR	set	4009
   148  0000                     _EECON1bits	set	4006
   149  0000                     _EECON2	set	4007
   150  0000                     _EEDATA	set	4008
   151  0000                     _INTCONbits	set	4082
   152  0000                     _OSCCON	set	4051
   153  0000                     _OSCTUNE	set	3995
   154  0000                     _PIE1bits	set	3997
   155  0000                     _PIR1bits	set	3998
   156  0000                     _PIR2bits	set	4001
   157  0000                     _PORTA	set	3968
   158  0000                     _PORTB	set	3969
   159  0000                     _PORTC	set	3970
   160  0000                     _PORTCbits	set	3970
   161  0000                     _RCONbits	set	4048
   162  0000                     _RCREG	set	4014
   163  0000                     _RCSTAbits	set	4011
   164  0000                     _SPBRG	set	4015
   165  0000                     _SSPBUF	set	4041
   166  0000                     _SSPCON1	set	4038
   167  0000                     _SSPCON1bits	set	4038
   168  0000                     _SSPSTAT	set	4039
   169  0000                     _SSPSTATbits	set	4039
   170  0000                     _T0CONbits	set	4053
   171  0000                     _T1CON	set	4045
   172  0000                     _T1CONbits	set	4045
   173  0000                     _TMR0H	set	4055
   174  0000                     _TMR0L	set	4054
   175  0000                     _TMR1H	set	4047
   176  0000                     _TMR1L	set	4046
   177  0000                     _TRISA	set	3986
   178  0000                     _TRISAbits	set	3986
   179  0000                     _TRISB	set	3987
   180  0000                     _TRISC	set	3988
   181  0000                     _TRISCbits	set	3988
   182  0000                     _TXREG	set	4013
   183  0000                     _TXSTAbits	set	4012
   184                           
   185                           ; #config settings
   186  0000                     
   187                           	psect	cinit
   188  0007F6                     __pcinit:
   189                           	opt stack 0
   190  0007F6                     start_initialization:
   191                           	opt stack 0
   192  0007F6                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Initialize objects allocated to COMRAM (37 bytes)
   196                           ; load TBLPTR registers with __pidataCOMRAM
   197  0007F6  0E7E               	movlw	low __pidataCOMRAM
   198  0007F8  6EF6               	movwf	tblptrl,c
   199  0007FA  0E09               	movlw	high __pidataCOMRAM
   200  0007FC  6EF7               	movwf	tblptrh,c
   201  0007FE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   202  000800  6EF8               	movwf	tblptru,c
   203  000802  EE00  F031         	lfsr	0,__pdataCOMRAM
   204  000806  EE10 F025          	lfsr	1,37
   205  00080A                     copy_data0:
   206  00080A  0009               	tblrd		*+
   207  00080C  CFF5 FFEE          	movff	tablat,postinc0
   208  000810  50E5               	movf	postdec1,w,c
   209  000812  50E1               	movf	fsr1l,w,c
   210  000814  E1FA               	bnz	copy_data0
   211                           
   212                           ; Clear objects allocated to COMRAM (48 bytes)
   213  000816  EE00  F001         	lfsr	0,__pbssCOMRAM
   214  00081A  0E30               	movlw	48
   215  00081C                     clear_0:
   216  00081C  6AEE               	clrf	postinc0,c
   217  00081E  06E8               	decf	wreg,f,c
   218  000820  E1FD               	bnz	clear_0
   219  000822                     end_of_initialization:
   220                           	opt stack 0
   221  000822                     __end_of__initialization:
   222                           	opt stack 0
   223  000822  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   224  000824  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   225  000826  0E00               	movlw	low (__Lmediumconst shr (0+16))
   226  000828  6EF8               	movwf	tblptru,c
   227  00082A  0100               	movlb	0
   228  00082C  EF4C  F000         	goto	_main	;jump to C main() function
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           postdec1	equ	0xFE5
   236                           fsr1l	equ	0xFE1
   237                           
   238                           	psect	bssCOMRAM
   239  000001                     __pbssCOMRAM:
   240                           	opt stack 0
   241  000001                     _rx_packet:
   242                           	opt stack 0
   243  000001                     	ds	21
   244  000016                     _spi_rx:
   245                           	opt stack 0
   246  000016                     	ds	4
   247  00001A                     _spi_tx:
   248                           	opt stack 0
   249  00001A                     	ds	4
   250  00001E                     _led_timer:
   251                           	opt stack 0
   252  00001E                     	ds	2
   253  000020                     L6474@n:
   254                           	opt stack 0
   255  000020                     	ds	1
   256  000021                     L6474@value:
   257                           	opt stack 0
   258  000021                     	ds	1
   259  000022                     _chksum:
   260                           	opt stack 0
   261  000022                     	ds	1
   262  000023                     _eeprom_offset:
   263                           	opt stack 0
   264  000023                     	ds	1
   265  000024                     	ds	1
   266  000025                     _led_status:
   267                           	opt stack 0
   268  000025                     	ds	1
   269  000026                     _motor_enabled:
   270                           	opt stack 0
   271  000026                     	ds	1
   272  000027                     _motor_unit:
   273                           	opt stack 0
   274  000027                     	ds	1
   275  000028                     _n:
   276                           	opt stack 0
   277  000028                     	ds	1
   278  000029                     _offset:
   279                           	opt stack 0
   280  000029                     	ds	1
   281  00002A                     _param1:
   282                           	opt stack 0
   283  00002A                     	ds	1
   284  00002B                     _param2:
   285                           	opt stack 0
   286  00002B                     	ds	1
   287  00002C                     _param3:
   288                           	opt stack 0
   289  00002C                     	ds	1
   290  00002D                     _rx:
   291                           	opt stack 0
   292  00002D                     	ds	1
   293  00002E                     _rx_index:
   294                           	opt stack 0
   295  00002E                     	ds	1
   296  00002F                     _state:
   297                           	opt stack 0
   298  00002F                     	ds	1
   299  000030                     _value:
   300                           	opt stack 0
   301  000030                     	ds	1
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           postdec1	equ	0xFE5
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	dataCOMRAM
   312  000031                     __pdataCOMRAM:
   313                           	opt stack 0
   314  000031                     _default_value:
   315                           	opt stack 0
   316  000031                     	ds	21
   317  000046                     uart_p2x@F2625:
   318                           	opt stack 0
   319  000046                     	ds	16
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           postdec1	equ	0xFE5
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	cstackCOMRAM
   330  000056                     __pcstackCOMRAM:
   331                           	opt stack 0
   332  000056                     ??_high_isr:
   333  000056                     
   334                           ; 1 bytes @ 0x0
   335  000056                     	ds	14
   336  000064                     get_eeprom_offset@unit:
   337                           	opt stack 0
   338  000064                     read_eeprom_data@addr:
   339                           	opt stack 0
   340  000064                     write_eeprom_data@data:
   341                           	opt stack 0
   342  000064                     uart_putc@byte:
   343                           	opt stack 0
   344  000064                     uart_getc@c:
   345                           	opt stack 0
   346  000064                     OpenSPI@bus_mode:
   347                           	opt stack 0
   348  000064                     WriteSPI@TempVar:
   349                           	opt stack 0
   350  000064                     delay_us@usec:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0xE
   354  000064                     	ds	1
   355  000065                     blank_check@unit:
   356                           	opt stack 0
   357  000065                     chksum_check@unit:
   358                           	opt stack 0
   359  000065                     write_eeprom_data@addr:
   360                           	opt stack 0
   361  000065                     OpenSPI@smp_phase:
   362                           	opt stack 0
   363  000065                     WriteSPI@data_out:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0xF
   367  000065                     	ds	1
   368  000066                     OpenSPI@sync_mode:
   369                           	opt stack 0
   370  000066                     delay_us@n:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x10
   374  000066                     	ds	2
   375  000068                     read_spi_chain_single@unit:
   376                           	opt stack 0
   377  000068                     write_spi_chain@unit:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x12
   381  000068                     	ds	1
   382  000069                     read_spi_chain@unit:
   383                           	opt stack 0
   384  000069                     write_spi_chain@value:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x13
   388  000069                     	ds	1
   389  00006A                     read_spi_chain@num_response:
   390                           	opt stack 0
   391  00006A                     set_abs_pos@unit:
   392                           	opt stack 0
   393  00006A                     set_el_pos@unit:
   394                           	opt stack 0
   395  00006A                     set_mark@unit:
   396                           	opt stack 0
   397  00006A                     set_tval@unit:
   398                           	opt stack 0
   399  00006A                     set_t_fast@unit:
   400                           	opt stack 0
   401  00006A                     set_ton_min@unit:
   402                           	opt stack 0
   403  00006A                     set_toff_min@unit:
   404                           	opt stack 0
   405  00006A                     set_adc_out@unit:
   406                           	opt stack 0
   407  00006A                     set_ocd_th@unit:
   408                           	opt stack 0
   409  00006A                     set_step_mode@unit:
   410                           	opt stack 0
   411  00006A                     set_alarm_en@unit:
   412                           	opt stack 0
   413  00006A                     set_config@unit:
   414                           	opt stack 0
   415  00006A                     motor_enable@unit:
   416                           	opt stack 0
   417  00006A                     motor_disable@unit:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x14
   421  00006A                     	ds	1
   422  00006B                     get_abs_pos@unit:
   423                           	opt stack 0
   424  00006B                     get_el_pos@unit:
   425                           	opt stack 0
   426  00006B                     get_mark@unit:
   427                           	opt stack 0
   428  00006B                     get_tval@unit:
   429                           	opt stack 0
   430  00006B                     get_t_fast@unit:
   431                           	opt stack 0
   432  00006B                     get_ton_min@unit:
   433                           	opt stack 0
   434  00006B                     get_toff_min@unit:
   435                           	opt stack 0
   436  00006B                     get_adc_out@unit:
   437                           	opt stack 0
   438  00006B                     get_ocd_th@unit:
   439                           	opt stack 0
   440  00006B                     get_step_mode@unit:
   441                           	opt stack 0
   442  00006B                     get_alarm_en@unit:
   443                           	opt stack 0
   444  00006B                     get_config@unit:
   445                           	opt stack 0
   446  00006B                     reset_position@unit:
   447                           	opt stack 0
   448  00006B                     get_status@unit:
   449                           	opt stack 0
   450  00006B                     copy_from_eeprom@unit:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x15
   454  00006B                     	ds	1
   455  00006C                     tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           ; 1 bytes @ 0x16
   465 ;;
   466 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   467 ;;
   468 ;; *************** function _main *****************
   469 ;; Defined at:
   470 ;;		line 110 in file "src/main.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMRAM   BANK0   BANK1
   484 ;;      Params:         0       0       0
   485 ;;      Locals:         0       0       0
   486 ;;      Temps:          0       0       0
   487 ;;      Totals:         0       0       0
   488 ;;Total ram usage:        0 bytes
   489 ;; Hardware stack levels required when called:    5
   490 ;; This function calls:
   491 ;;		_OpenSPI
   492 ;;		_blank_check
   493 ;;		_chksum_check
   494 ;;		_copy_from_eeprom
   495 ;;		_get_abs_pos
   496 ;;		_get_adc_out
   497 ;;		_get_alarm_en
   498 ;;		_get_config
   499 ;;		_get_el_pos
   500 ;;		_get_mark
   501 ;;		_get_ocd_th
   502 ;;		_get_status
   503 ;;		_get_step_mode
   504 ;;		_get_t_fast
   505 ;;		_get_toff_min
   506 ;;		_get_ton_min
   507 ;;		_get_tval
   508 ;;		_motor_disable
   509 ;;		_motor_enable
   510 ;;		_reset_position
   511 ;;		_uart_getc
   512 ;;		_uart_putc
   513 ;;		_write_eeprom_data
   514 ;; This function is called by:
   515 ;;		Startup code after reset
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text0
   520  000098                     __ptext0:
   521                           	opt stack 0
   522  000098                     _main:
   523                           	opt stack 26
   524                           
   525                           ;main.c: 113: PORTC = 0xFD;
   526                           
   527                           ;incstack = 0
   528  000098  0EFD               	movlw	253
   529  00009A  6E82               	movwf	3970,c	;volatile
   530                           
   531                           ;main.c: 114: TRISC = 0x91;
   532  00009C  0E91               	movlw	145
   533  00009E  6E94               	movwf	3988,c	;volatile
   534                           
   535                           ;main.c: 123: OSCCON = 0x70;
   536  0000A0  0E70               	movlw	112
   537  0000A2  6ED3               	movwf	4051,c	;volatile
   538                           
   539                           ;main.c: 126: OSCTUNE = 0xC0;
   540  0000A4  0EC0               	movlw	192
   541  0000A6  6E9B               	movwf	3995,c	;volatile
   542                           
   543                           ;main.c: 131: RCONbits.IPEN = 0;
   544  0000A8  9ED0               	bcf	4048,7,c	;volatile
   545                           
   546                           ;main.c: 137: T0CONbits.TMR0ON = 0;
   547  0000AA  9ED5               	bcf	4053,7,c	;volatile
   548                           
   549                           ;main.c: 138: TMR0H = 0;
   550  0000AC  0E00               	movlw	0
   551  0000AE  6ED7               	movwf	4055,c	;volatile
   552                           
   553                           ;main.c: 139: TMR0L = 0;
   554  0000B0  0E00               	movlw	0
   555  0000B2  6ED6               	movwf	4054,c	;volatile
   556                           
   557                           ;main.c: 140: T0CONbits.T08BIT = 0;
   558  0000B4  9CD5               	bcf	4053,6,c	;volatile
   559                           
   560                           ;main.c: 141: T0CONbits.T0CS = 0;
   561  0000B6  9AD5               	bcf	4053,5,c	;volatile
   562                           
   563                           ;main.c: 142: T0CONbits.T0SE = 0;
   564  0000B8  98D5               	bcf	4053,4,c	;volatile
   565                           
   566                           ;main.c: 143: T0CONbits.PSA = 1;
   567  0000BA  86D5               	bsf	4053,3,c	;volatile
   568                           
   569                           ;main.c: 144: INTCONbits.TMR0IF = 0;
   570  0000BC  94F2               	bcf	intcon,2,c	;volatile
   571                           
   572                           ;main.c: 145: INTCONbits.TMR0IE = 0;
   573  0000BE  9AF2               	bcf	intcon,5,c	;volatile
   574                           
   575                           ;main.c: 152: T1CONbits.TMR1ON = 0;
   576  0000C0  90CD               	bcf	4045,0,c	;volatile
   577                           
   578                           ;main.c: 153: T1CON = 0x30;
   579  0000C2  0E30               	movlw	48
   580  0000C4  6ECD               	movwf	4045,c	;volatile
   581                           
   582                           ;main.c: 154: TMR1H = 0xFF;
   583  0000C6  68CF               	setf	4047,c	;volatile
   584                           
   585                           ;main.c: 155: TMR1L = 0xFF;
   586  0000C8  68CE               	setf	4046,c	;volatile
   587                           
   588                           ;main.c: 156: T1CONbits.TMR1ON = 1;
   589  0000CA  80CD               	bsf	4045,0,c	;volatile
   590                           
   591                           ;main.c: 161: PIR1bits.TMR1IF = 0;
   592  0000CC  909E               	bcf	3998,0,c	;volatile
   593                           
   594                           ;main.c: 162: PIE1bits.TMR1IE = 1;
   595  0000CE  809D               	bsf	3997,0,c	;volatile
   596                           
   597                           ;main.c: 163: do{PIE1bits.TMR1IE=0;total_1ms_tick=0;PIE1bits.TMR1IE=1;}while(0);
   598  0000D0  909D               	bcf	3997,0,c	;volatile
   599  0000D2  0E00               	movlw	0
   600  0000D4  6E6D               	movwf	_total_1ms_tick+1,c
   601  0000D6  0E00               	movlw	0
   602  0000D8  6E6C               	movwf	_total_1ms_tick,c
   603  0000DA  809D               	bsf	3997,0,c	;volatile
   604                           
   605                           ;main.c: 168: INTCONbits.GIE = 1;
   606  0000DC  8EF2               	bsf	intcon,7,c	;volatile
   607                           
   608                           ;main.c: 169: INTCONbits.PEIE = 1;
   609  0000DE  8CF2               	bsf	intcon,6,c	;volatile
   610                           
   611                           ;main.c: 172: ADCON1bits.PCFG0 = 1;
   612  0000E0  80C1               	bsf	4033,0,c	;volatile
   613                           
   614                           ;main.c: 173: ADCON1bits.PCFG1 = 1;
   615  0000E2  82C1               	bsf	4033,1,c	;volatile
   616                           
   617                           ;main.c: 174: ADCON1bits.PCFG2 = 1;
   618  0000E4  84C1               	bsf	4033,2,c	;volatile
   619                           
   620                           ;main.c: 175: ADCON1bits.PCFG3 = 1;
   621  0000E6  86C1               	bsf	4033,3,c	;volatile
   622                           
   623                           ;main.c: 178: PORTA = 0xFF;
   624  0000E8  6880               	setf	3968,c	;volatile
   625                           
   626                           ;main.c: 179: TRISA = 0xFF;
   627  0000EA  6892               	setf	3986,c	;volatile
   628                           
   629                           ;main.c: 181: PORTB = 0xFF;
   630  0000EC  6881               	setf	3969,c	;volatile
   631                           
   632                           ;main.c: 182: TRISB = 0x00;
   633  0000EE  0E00               	movlw	0
   634  0000F0  6E93               	movwf	3987,c	;volatile
   635                           
   636                           ;main.c: 185: RCSTAbits.SPEN = 0;
   637  0000F2  9EAB               	bcf	4011,7,c	;volatile
   638                           
   639                           ;main.c: 186: RCSTAbits.CREN = 0;
   640  0000F4  98AB               	bcf	4011,4,c	;volatile
   641                           
   642                           ;main.c: 187: TXSTAbits.TXEN = 0;
   643  0000F6  9AAC               	bcf	4012,5,c	;volatile
   644                           
   645                           ;main.c: 188: TXSTAbits.BRGH = 0;
   646  0000F8  94AC               	bcf	4012,2,c	;volatile
   647                           
   648                           ;main.c: 189: TXSTAbits.TRMT = 0;
   649  0000FA  92AC               	bcf	4012,1,c	;volatile
   650                           
   651                           ;main.c: 190: SPBRG = (((32000000L)/(16L * (9600)) - 1));
   652  0000FC  0ECF               	movlw	207
   653  0000FE  6EAF               	movwf	4015,c	;volatile
   654                           
   655                           ;main.c: 191: BAUDCONbits.BRG16 = 0;
   656  000100  96B8               	bcf	4024,3,c	;volatile
   657                           
   658                           ;main.c: 192: BAUDCONbits.RCIDL = 1;
   659  000102  8CB8               	bsf	4024,6,c	;volatile
   660                           
   661                           ;main.c: 193: RCSTAbits.SPEN = 1;
   662  000104  8EAB               	bsf	4011,7,c	;volatile
   663                           
   664                           ;main.c: 194: RCSTAbits.CREN = 1;
   665  000106  88AB               	bsf	4011,4,c	;volatile
   666                           
   667                           ;main.c: 195: TXSTAbits.BRGH = 1;
   668  000108  84AC               	bsf	4012,2,c	;volatile
   669                           
   670                           ;main.c: 196: TXSTAbits.TRMT = 1;
   671  00010A  82AC               	bsf	4012,1,c	;volatile
   672                           
   673                           ;main.c: 197: TXSTAbits.TXEN = 1;
   674  00010C  8AAC               	bsf	4012,5,c	;volatile
   675                           
   676                           ;main.c: 211: do{PIE1bits.TMR1IE=0;total_1ms_tick=0;PIE1bits.TMR1IE=1;}while(0);
   677  00010E  909D               	bcf	3997,0,c	;volatile
   678  000110  0E00               	movlw	0
   679  000112  6E6D               	movwf	_total_1ms_tick+1,c
   680  000114  0E00               	movlw	0
   681  000116  6E6C               	movwf	_total_1ms_tick,c
   682  000118  809D               	bsf	3997,0,c	;volatile
   683  00011A                     l2211:
   684  00011A  506C               	movf	_total_1ms_tick,w,c
   685  00011C  106D               	iorwf	_total_1ms_tick+1,w,c
   686  00011E  B4D8               	btfsc	status,2,c
   687  000120  D7FC               	goto	l2211
   688                           
   689                           ;main.c: 215: n = RCSTAbits.FERR;
   690  000122  0E00               	movlw	0
   691  000124  B4AB               	btfsc	4011,2,c	;volatile
   692  000126  0E01               	movlw	1
   693  000128  6E28               	movwf	_n,c
   694                           
   695                           ;main.c: 216: n = RCSTAbits.OERR;
   696  00012A  0E00               	movlw	0
   697  00012C  B2AB               	btfsc	4011,1,c	;volatile
   698  00012E  0E01               	movlw	1
   699  000130  6E28               	movwf	_n,c
   700                           
   701                           ;main.c: 218: n = RCREG;
   702  000132  CFAE F028          	movff	4014,_n	;volatile
   703                           
   704                           ;main.c: 224: PORTCbits.RC2 = 1;
   705  000136  8482               	bsf	3970,2,c	;volatile
   706                           
   707                           ;main.c: 227: for (n = 0; n < 10; n++) {
   708  000138  0E00               	movlw	0
   709  00013A  6E28               	movwf	_n,c
   710  00013C                     l2221:
   711  00013C  0E09               	movlw	9
   712  00013E  6428               	cpfsgt	_n,c
   713  000140  D001               	goto	l368
   714  000142  D00E               	goto	l2235
   715  000144                     l368:
   716  000144  909D               	bcf	3997,0,c	;volatile
   717  000146  0E00               	movlw	0
   718  000148  6E6D               	movwf	_total_1ms_tick+1,c
   719  00014A  0E00               	movlw	0
   720  00014C  6E6C               	movwf	_total_1ms_tick,c
   721  00014E  809D               	bsf	3997,0,c	;volatile
   722  000150                     l2229:
   723  000150  0EE8               	movlw	232
   724  000152  5C6C               	subwf	_total_1ms_tick,w,c
   725  000154  0E03               	movlw	3
   726  000156  586D               	subwfb	_total_1ms_tick+1,w,c
   727  000158  A0D8               	btfss	status,0,c
   728  00015A  D7FA               	goto	l2229
   729  00015C  2A28               	incf	_n,f,c
   730  00015E  D7EE               	goto	l2221
   731  000160                     l2235:
   732                           
   733                           ;main.c: 230: }
   734                           ;main.c: 233: (SSPCON1 &=0xDF);
   735  000160  9AC6               	bcf	4038,5,c	;volatile
   736                           
   737                           ;main.c: 234: OpenSPI(0b00000010, 0b00000011, 0b00000000);
   738  000162  0E03               	movlw	3
   739  000164  6E64               	movwf	OpenSPI@bus_mode,c
   740  000166  0E00               	movlw	0
   741  000168  6E65               	movwf	OpenSPI@smp_phase,c
   742  00016A  0E02               	movlw	2
   743  00016C  ECA6  F003         	call	_OpenSPI
   744                           
   745                           ;main.c: 237: do{PIE1bits.TMR1IE=0;total_1ms_tick=0;PIE1bits.TMR1IE=1;}while(0);
   746  000170  909D               	bcf	3997,0,c	;volatile
   747  000172  0E00               	movlw	0
   748  000174  6E6D               	movwf	_total_1ms_tick+1,c
   749  000176  0E00               	movlw	0
   750  000178  6E6C               	movwf	_total_1ms_tick,c
   751  00017A  809D               	bsf	3997,0,c	;volatile
   752  00017C                     l2245:
   753  00017C  506D               	movf	_total_1ms_tick+1,w,c
   754  00017E  E104               	bnz	l2247
   755  000180  0EC8               	movlw	200
   756  000182  5C6C               	subwf	_total_1ms_tick,w,c
   757  000184  A0D8               	btfss	status,0,c
   758  000186  D7FA               	goto	l2245
   759  000188                     l2247:
   760                           
   761                           ;main.c: 317: for (n = 0; n < (((((((((((((((0) + 3) + 2) + 3) + 1) + 1) + 1) + 1) + 1) 
      +                          + 1) + 1) + 1) + 2) + 2) + 1); n++) {
   762  000188  0E00               	movlw	0
   763  00018A  6E28               	movwf	_n,c
   764  00018C                     l2249:
   765  00018C  0E14               	movlw	20
   766  00018E  6428               	cpfsgt	_n,c
   767  000190  D001               	goto	l2253
   768  000192  D039               	goto	l2259
   769  000194                     l2253:
   770                           
   771                           ;main.c: 318: write_eeprom_data(((0) * (0x20)) + n, default_value[n]);
   772  000194  5028               	movf	_n,w,c
   773  000196  0D01               	mullw	1
   774  000198  0E31               	movlw	low _default_value
   775  00019A  24F3               	addwf	prodl,w,c
   776  00019C  6ED9               	movwf	fsr2l,c
   777  00019E  0E00               	movlw	high _default_value
   778  0001A0  20F4               	addwfc	prodh,w,c
   779  0001A2  6EDA               	movwf	fsr2h,c
   780  0001A4  50DF               	movf	indf2,w,c
   781  0001A6  6E64               	movwf	write_eeprom_data@data,c
   782  0001A8  5028               	movf	_n,w,c
   783  0001AA  ECAB  F004         	call	_write_eeprom_data
   784                           
   785                           ;main.c: 319: write_eeprom_data(((1) * (0x20)) + n, default_value[n]);
   786  0001AE  5028               	movf	_n,w,c
   787  0001B0  0D01               	mullw	1
   788  0001B2  0E31               	movlw	low _default_value
   789  0001B4  24F3               	addwf	prodl,w,c
   790  0001B6  6ED9               	movwf	fsr2l,c
   791  0001B8  0E00               	movlw	high _default_value
   792  0001BA  20F4               	addwfc	prodh,w,c
   793  0001BC  6EDA               	movwf	fsr2h,c
   794  0001BE  50DF               	movf	indf2,w,c
   795  0001C0  6E64               	movwf	write_eeprom_data@data,c
   796  0001C2  5028               	movf	_n,w,c
   797  0001C4  0F20               	addlw	32
   798  0001C6  ECAB  F004         	call	_write_eeprom_data
   799                           
   800                           ;main.c: 320: write_eeprom_data(((2) * (0x20)) + n, default_value[n]);
   801  0001CA  5028               	movf	_n,w,c
   802  0001CC  0D01               	mullw	1
   803  0001CE  0E31               	movlw	low _default_value
   804  0001D0  24F3               	addwf	prodl,w,c
   805  0001D2  6ED9               	movwf	fsr2l,c
   806  0001D4  0E00               	movlw	high _default_value
   807  0001D6  20F4               	addwfc	prodh,w,c
   808  0001D8  6EDA               	movwf	fsr2h,c
   809  0001DA  50DF               	movf	indf2,w,c
   810  0001DC  6E64               	movwf	write_eeprom_data@data,c
   811  0001DE  5028               	movf	_n,w,c
   812  0001E0  0F40               	addlw	64
   813  0001E2  ECAB  F004         	call	_write_eeprom_data
   814                           
   815                           ;main.c: 321: write_eeprom_data(((3) * (0x20)) + n, default_value[n]);
   816  0001E6  5028               	movf	_n,w,c
   817  0001E8  0D01               	mullw	1
   818  0001EA  0E31               	movlw	low _default_value
   819  0001EC  24F3               	addwf	prodl,w,c
   820  0001EE  6ED9               	movwf	fsr2l,c
   821  0001F0  0E00               	movlw	high _default_value
   822  0001F2  20F4               	addwfc	prodh,w,c
   823  0001F4  6EDA               	movwf	fsr2h,c
   824  0001F6  50DF               	movf	indf2,w,c
   825  0001F8  6E64               	movwf	write_eeprom_data@data,c
   826  0001FA  5028               	movf	_n,w,c
   827  0001FC  0F60               	addlw	96
   828  0001FE  ECAB  F004         	call	_write_eeprom_data
   829  000202  2A28               	incf	_n,f,c
   830  000204  D7C3               	goto	l2249
   831  000206                     l2259:
   832                           
   833                           ;main.c: 322: }
   834                           ;main.c: 326: motor_enabled = 0;
   835  000206  0E00               	movlw	0
   836  000208  6E26               	movwf	_motor_enabled,c
   837                           
   838                           ;main.c: 327: motor_disable((0));
   839  00020A  0E00               	movlw	0
   840  00020C  EC24  F006         	call	_motor_disable
   841                           
   842                           ;main.c: 328: motor_disable((1));
   843  000210  0E01               	movlw	1
   844  000212  EC24  F006         	call	_motor_disable
   845                           
   846                           ;main.c: 329: motor_disable((2));
   847  000216  0E02               	movlw	2
   848  000218  EC24  F006         	call	_motor_disable
   849                           
   850                           ;main.c: 330: motor_disable((3));
   851  00021C  0E03               	movlw	3
   852  00021E  EC24  F006         	call	_motor_disable
   853                           
   854                           ;main.c: 333: for (n = (0); n <= (3); n++) {
   855  000222  0E00               	movlw	0
   856  000224  6E28               	movwf	_n,c
   857  000226                     l2269:
   858  000226  0E03               	movlw	3
   859  000228  6428               	cpfsgt	_n,c
   860  00022A  D001               	goto	l2273
   861  00022C  D011               	goto	l2283
   862  00022E                     l2273:
   863                           
   864                           ;main.c: 334: if ((!blank_check(n)) && chksum_check(n)) {
   865  00022E  5028               	movf	_n,w,c
   866  000230  EC67  F004         	call	_blank_check
   867  000234  0900               	iorlw	0
   868  000236  A4D8               	btfss	status,2,c
   869  000238  D009               	goto	l2279
   870  00023A  5028               	movf	_n,w,c
   871  00023C  EC33  F004         	call	_chksum_check
   872  000240  0900               	iorlw	0
   873  000242  B4D8               	btfsc	status,2,c
   874  000244  D003               	goto	l2279
   875                           
   876                           ;main.c: 335: copy_from_eeprom(n);
   877  000246  5028               	movf	_n,w,c
   878  000248  EC8C  F002         	call	_copy_from_eeprom
   879  00024C                     l2279:
   880  00024C  2A28               	incf	_n,f,c
   881  00024E  D7EB               	goto	l2269
   882  000250                     l2283:
   883  000250  0E00               	movlw	0
   884  000252  6E2E               	movwf	_rx_index,c
   885  000254  0E00               	movlw	0
   886  000256  6E22               	movwf	_chksum,c
   887  000258  D15C               	goto	l2453
   888  00025A                     l2285:
   889                           
   890                           ;main.c: 346: if (PORTCbits.RC0 == 1) {
   891  00025A  A082               	btfss	3970,0,c	;volatile
   892  00025C  D12C               	goto	l2427
   893                           
   894                           ;main.c: 349: if (motor_enabled) {
   895  00025E  5026               	movf	_motor_enabled,w,c
   896  000260  B4D8               	btfsc	status,2,c
   897  000262  D018               	goto	l2303
   898                           
   899                           ;main.c: 351: PIR1bits.TMR1IF = 0;
   900  000264  909E               	bcf	3998,0,c	;volatile
   901                           
   902                           ;main.c: 352: PIE1bits.TMR1IE = 1;
   903  000266  809D               	bsf	3997,0,c	;volatile
   904                           
   905                           ;main.c: 353: do{PIE1bits.TMR1IE=0;total_1ms_tick=0;PIE1bits.TMR1IE=1;}while(0);
   906  000268  909D               	bcf	3997,0,c	;volatile
   907  00026A  0E00               	movlw	0
   908  00026C  6E6D               	movwf	_total_1ms_tick+1,c
   909  00026E  0E00               	movlw	0
   910  000270  6E6C               	movwf	_total_1ms_tick,c
   911  000272  809D               	bsf	3997,0,c	;volatile
   912                           
   913                           ;main.c: 355: motor_disable((0));
   914  000274  0E00               	movlw	0
   915  000276  EC24  F006         	call	_motor_disable
   916                           
   917                           ;main.c: 356: motor_disable((1));
   918  00027A  0E01               	movlw	1
   919  00027C  EC24  F006         	call	_motor_disable
   920                           
   921                           ;main.c: 357: motor_disable((2));
   922  000280  0E02               	movlw	2
   923  000282  EC24  F006         	call	_motor_disable
   924                           
   925                           ;main.c: 358: motor_disable((3));
   926  000286  0E03               	movlw	3
   927  000288  EC24  F006         	call	_motor_disable
   928                           
   929                           ;main.c: 359: motor_enabled = 0;
   930  00028C  0E00               	movlw	0
   931  00028E  6E26               	movwf	_motor_enabled,c
   932                           
   933                           ;main.c: 360: state = (0);
   934  000290  0E00               	movlw	0
   935  000292  6E2F               	movwf	_state,c
   936  000294                     l2303:
   937                           
   938                           ;main.c: 361: }
   939                           ;main.c: 364: if (!PIR1bits.RCIF) {
   940  000294  AA9E               	btfss	3998,5,c	;volatile
   941  000296  D7E1               	goto	l2285
   942                           
   943                           ;main.c: 366: }
   944                           ;main.c: 369: rx = uart_getc();
   945                           
   946                           ;main.c: 365: goto state_machine_entry;
   947  000298  EC2B  F006         	call	_uart_getc	;wreg free
   948  00029C  6E2D               	movwf	_rx,c
   949                           
   950                           ;main.c: 370: switch (state) {
   951  00029E  D103               	goto	l2425
   952  0002A0                     l2309:
   953                           
   954                           ;main.c: 375: case 'X':
   955                           ;main.c: 376: motor_unit = (0);
   956  0002A0  0E00               	movlw	0
   957  0002A2  D005               	goto	L3
   958  0002A4                     l2311:
   959                           
   960                           ;main.c: 379: case 'Y':
   961                           ;main.c: 380: motor_unit = (1);
   962  0002A4  0E01               	movlw	1
   963  0002A6  D003               	goto	L3
   964  0002A8                     l2313:
   965                           
   966                           ;main.c: 383: case 'Z':
   967                           ;main.c: 384: motor_unit = (2);
   968  0002A8  0E02               	movlw	2
   969  0002AA  D001               	goto	L3
   970  0002AC                     l2315:
   971                           
   972                           ;main.c: 387: case 'A':
   973                           ;main.c: 388: motor_unit = (3);
   974  0002AC  0E03               	movlw	3
   975  0002AE                     L3:
   976  0002AE  6E27               	movwf	_motor_unit,c
   977                           
   978                           ;main.c: 390: }
   979                           
   980                           ;main.c: 389: break;
   981  0002B0  D08F               	goto	l2377
   982  0002B2                     l2319:
   983  0002B2  502D               	movf	_rx,w,c
   984                           
   985                           ; Switch size 1, requested type "space"
   986                           ; Number of cases is 8, Range of values is 65 to 122
   987                           ; switch strategies available:
   988                           ; Name         Instructions Cycles
   989                           ; simple_byte           25    13 (average)
   990                           ;	Chosen strategy is simple_byte
   991  0002B4  0A41               	xorlw	65	; case 65
   992  0002B6  B4D8               	btfsc	status,2,c
   993  0002B8  D7F9               	goto	l2315
   994  0002BA  0A19               	xorlw	25	; case 88
   995  0002BC  B4D8               	btfsc	status,2,c
   996  0002BE  D7F0               	goto	l2309
   997  0002C0  0A01               	xorlw	1	; case 89
   998  0002C2  B4D8               	btfsc	status,2,c
   999  0002C4  D7EF               	goto	l2311
  1000  0002C6  0A03               	xorlw	3	; case 90
  1001  0002C8  B4D8               	btfsc	status,2,c
  1002  0002CA  D7EE               	goto	l2313
  1003  0002CC  0A3B               	xorlw	59	; case 97
  1004  0002CE  B4D8               	btfsc	status,2,c
  1005  0002D0  D7ED               	goto	l2315
  1006  0002D2  0A19               	xorlw	25	; case 120
  1007  0002D4  B4D8               	btfsc	status,2,c
  1008  0002D6  D7E4               	goto	l2309
  1009  0002D8  0A01               	xorlw	1	; case 121
  1010  0002DA  B4D8               	btfsc	status,2,c
  1011  0002DC  D7E3               	goto	l2311
  1012  0002DE  0A03               	xorlw	3	; case 122
  1013  0002E0  B4D8               	btfsc	status,2,c
  1014  0002E2  D7E2               	goto	l2313
  1015                           
  1016                           ;main.c: 392: switch (rx) {
  1017  0002E4  D075               	goto	l2377
  1018  0002E6                     l2321:
  1019                           
  1020                           ;main.c: 394: uart_putc((0x52));
  1021  0002E6  0E52               	movlw	82
  1022  0002E8  EC0D  F006         	call	_uart_putc
  1023                           
  1024                           ;main.c: 395: break;
  1025  0002EC  D7B6               	goto	l2285
  1026  0002EE                     l2323:
  1027                           
  1028                           ;main.c: 398: case 'y':
  1029                           ;main.c: 399: case 'z':
  1030                           ;main.c: 400: case 'a':
  1031                           ;main.c: 403: get_abs_pos(motor_unit);
  1032  0002EE  5027               	movf	_motor_unit,w,c
  1033  0002F0  ECA1  F005         	call	_get_abs_pos
  1034                           
  1035                           ;main.c: 404: uart_putc(param1);
  1036  0002F4  502A               	movf	_param1,w,c
  1037  0002F6  EC0D  F006         	call	_uart_putc
  1038                           
  1039                           ;main.c: 405: uart_putc(param2);
  1040  0002FA  502B               	movf	_param2,w,c
  1041  0002FC  EC0D  F006         	call	_uart_putc
  1042                           
  1043                           ;main.c: 406: uart_putc(param3);
  1044  000300  502C               	movf	_param3,w,c
  1045  000302  EC0D  F006         	call	_uart_putc
  1046                           
  1047                           ;main.c: 408: get_el_pos(motor_unit);
  1048  000306  5027               	movf	_motor_unit,w,c
  1049  000308  EC71  F005         	call	_get_el_pos
  1050                           
  1051                           ;main.c: 409: uart_putc(param1);
  1052  00030C  502A               	movf	_param1,w,c
  1053  00030E  EC0D  F006         	call	_uart_putc
  1054                           
  1055                           ;main.c: 410: uart_putc(param2);
  1056  000312  502B               	movf	_param2,w,c
  1057  000314  EC0D  F006         	call	_uart_putc
  1058                           
  1059                           ;main.c: 412: get_mark(motor_unit);
  1060  000318  5027               	movf	_motor_unit,w,c
  1061  00031A  EC65  F005         	call	_get_mark
  1062                           
  1063                           ;main.c: 413: uart_putc(param1);
  1064  00031E  502A               	movf	_param1,w,c
  1065  000320  EC0D  F006         	call	_uart_putc
  1066                           
  1067                           ;main.c: 414: uart_putc(param2);
  1068  000324  502B               	movf	_param2,w,c
  1069  000326  EC0D  F006         	call	_uart_putc
  1070                           
  1071                           ;main.c: 415: uart_putc(param3);
  1072  00032A  502C               	movf	_param3,w,c
  1073  00032C  EC0D  F006         	call	_uart_putc
  1074                           
  1075                           ;main.c: 417: get_tval(motor_unit);
  1076  000330  5027               	movf	_motor_unit,w,c
  1077  000332  EC11  F005         	call	_get_tval
  1078                           
  1079                           ;main.c: 418: uart_putc(param1);
  1080  000336  502A               	movf	_param1,w,c
  1081  000338  EC0D  F006         	call	_uart_putc
  1082                           
  1083                           ;main.c: 420: get_t_fast(motor_unit);
  1084  00033C  5027               	movf	_motor_unit,w,c
  1085  00033E  EC35  F005         	call	_get_t_fast
  1086                           
  1087                           ;main.c: 421: uart_putc(param1);
  1088  000342  502A               	movf	_param1,w,c
  1089  000344  EC0D  F006         	call	_uart_putc
  1090                           
  1091                           ;main.c: 423: get_ton_min(motor_unit);
  1092  000348  5027               	movf	_motor_unit,w,c
  1093  00034A  EC1D  F005         	call	_get_ton_min
  1094                           
  1095                           ;main.c: 424: uart_putc(param1);
  1096  00034E  502A               	movf	_param1,w,c
  1097  000350  EC0D  F006         	call	_uart_putc
  1098                           
  1099                           ;main.c: 426: get_toff_min(motor_unit);
  1100  000354  5027               	movf	_motor_unit,w,c
  1101  000356  EC29  F005         	call	_get_toff_min
  1102                           
  1103                           ;main.c: 427: uart_putc(param1);
  1104  00035A  502A               	movf	_param1,w,c
  1105  00035C  EC0D  F006         	call	_uart_putc
  1106                           
  1107                           ;main.c: 429: get_adc_out(motor_unit);
  1108  000360  5027               	movf	_motor_unit,w,c
  1109  000362  EC95  F005         	call	_get_adc_out
  1110                           
  1111                           ;main.c: 430: uart_putc(param1);
  1112  000366  502A               	movf	_param1,w,c
  1113  000368  EC0D  F006         	call	_uart_putc
  1114                           
  1115                           ;main.c: 432: get_ocd_th(motor_unit);
  1116  00036C  5027               	movf	_motor_unit,w,c
  1117  00036E  EC59  F005         	call	_get_ocd_th
  1118                           
  1119                           ;main.c: 433: uart_putc(param1);
  1120  000372  502A               	movf	_param1,w,c
  1121  000374  EC0D  F006         	call	_uart_putc
  1122                           
  1123                           ;main.c: 435: get_step_mode(motor_unit);
  1124  000378  5027               	movf	_motor_unit,w,c
  1125  00037A  EC41  F005         	call	_get_step_mode
  1126                           
  1127                           ;main.c: 436: uart_putc(param1);
  1128  00037E  502A               	movf	_param1,w,c
  1129  000380  EC0D  F006         	call	_uart_putc
  1130                           
  1131                           ;main.c: 438: get_alarm_en(motor_unit);
  1132  000384  5027               	movf	_motor_unit,w,c
  1133  000386  EC89  F005         	call	_get_alarm_en
  1134                           
  1135                           ;main.c: 439: uart_putc(param1);
  1136  00038A  502A               	movf	_param1,w,c
  1137  00038C  EC0D  F006         	call	_uart_putc
  1138                           
  1139                           ;main.c: 441: get_config(motor_unit);
  1140  000390  5027               	movf	_motor_unit,w,c
  1141  000392  EC7D  F005         	call	_get_config
  1142                           
  1143                           ;main.c: 442: uart_putc(param1);
  1144  000396  502A               	movf	_param1,w,c
  1145  000398  EC0D  F006         	call	_uart_putc
  1146                           
  1147                           ;main.c: 443: uart_putc(param2);
  1148  00039C  502B               	movf	_param2,w,c
  1149  00039E  EC0D  F006         	call	_uart_putc
  1150                           
  1151                           ;main.c: 445: get_status(n);
  1152  0003A2  5028               	movf	_n,w,c
  1153  0003A4  EC4D  F005         	call	_get_status
  1154                           
  1155                           ;main.c: 446: uart_putc(param1);
  1156  0003A8  502A               	movf	_param1,w,c
  1157  0003AA  EC0D  F006         	call	_uart_putc
  1158                           
  1159                           ;main.c: 447: uart_putc(param2);
  1160  0003AE  502B               	movf	_param2,w,c
  1161  0003B0  EC0D  F006         	call	_uart_putc
  1162                           
  1163                           ;main.c: 449: uart_putc(0);
  1164  0003B4  0E00               	movlw	0
  1165  0003B6  EC0D  F006         	call	_uart_putc
  1166                           
  1167                           ;main.c: 450: break;
  1168  0003BA  D74F               	goto	l2285
  1169  0003BC                     l2371:
  1170  0003BC  0E00               	movlw	0
  1171  0003BE  6E2E               	movwf	_rx_index,c
  1172  0003C0  0E00               	movlw	0
  1173  0003C2  6E22               	movwf	_chksum,c
  1174                           
  1175                           ;main.c: 458: state = (1);
  1176  0003C4  0E01               	movlw	1
  1177  0003C6  6E2F               	movwf	_state,c
  1178                           
  1179                           ;main.c: 460: uart_putc(rx);
  1180  0003C8  502D               	movf	_rx,w,c
  1181  0003CA  EC0D  F006         	call	_uart_putc
  1182                           
  1183                           ;main.c: 462: }
  1184                           
  1185                           ;main.c: 461: break;
  1186  0003CE  D745               	goto	l2285
  1187  0003D0                     l2377:
  1188  0003D0  502D               	movf	_rx,w,c
  1189                           
  1190                           ; Switch size 1, requested type "space"
  1191                           ; Number of cases is 9, Range of values is 65 to 122
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte           28    15 (average)
  1195                           ;	Chosen strategy is simple_byte
  1196  0003D2  0A41               	xorlw	65	; case 65
  1197  0003D4  B4D8               	btfsc	status,2,c
  1198  0003D6  D7F2               	goto	l2371
  1199  0003D8  0A19               	xorlw	25	; case 88
  1200  0003DA  B4D8               	btfsc	status,2,c
  1201  0003DC  D7EF               	goto	l2371
  1202  0003DE  0A01               	xorlw	1	; case 89
  1203  0003E0  B4D8               	btfsc	status,2,c
  1204  0003E2  D7EC               	goto	l2371
  1205  0003E4  0A03               	xorlw	3	; case 90
  1206  0003E6  B4D8               	btfsc	status,2,c
  1207  0003E8  D7E9               	goto	l2371
  1208  0003EA  0A3B               	xorlw	59	; case 97
  1209  0003EC  B4D8               	btfsc	status,2,c
  1210  0003EE  D77F               	goto	l2323
  1211  0003F0  0A17               	xorlw	23	; case 118
  1212  0003F2  B4D8               	btfsc	status,2,c
  1213  0003F4  D778               	goto	l2321
  1214  0003F6  0A0E               	xorlw	14	; case 120
  1215  0003F8  B4D8               	btfsc	status,2,c
  1216  0003FA  D779               	goto	l2323
  1217  0003FC  0A01               	xorlw	1	; case 121
  1218  0003FE  B4D8               	btfsc	status,2,c
  1219  000400  D776               	goto	l2323
  1220  000402  0A03               	xorlw	3	; case 122
  1221  000404  B4D8               	btfsc	status,2,c
  1222  000406  D773               	goto	l2323
  1223                           
  1224                           ;main.c: 463: break;
  1225  000408  D728               	goto	l2285
  1226  00040A                     l2379:
  1227                           
  1228                           ;main.c: 466: rx_packet[rx_index] = rx;
  1229  00040A  502E               	movf	_rx_index,w,c
  1230  00040C  0D01               	mullw	1
  1231  00040E  0E01               	movlw	low _rx_packet
  1232  000410  24F3               	addwf	prodl,w,c
  1233  000412  6ED9               	movwf	fsr2l,c
  1234  000414  0E00               	movlw	high _rx_packet
  1235  000416  20F4               	addwfc	prodh,w,c
  1236  000418  6EDA               	movwf	fsr2h,c
  1237  00041A  C02D  FFDF         	movff	_rx,indf2
  1238                           
  1239                           ;main.c: 467: chksum += rx;
  1240  00041E  502D               	movf	_rx,w,c
  1241  000420  2622               	addwf	_chksum,f,c
  1242                           
  1243                           ;main.c: 468: rx_index++;
  1244  000422  2A2E               	incf	_rx_index,f,c
  1245                           
  1246                           ;main.c: 469: if (rx_index < (((((((((((((((0) + 3) + 2) + 3) + 1) + 1) + 1) + 1) + 1) +
      +                           1) + 1) + 1) + 2) + 2) + 1)) {
  1247  000424  0E15               	movlw	21
  1248  000426  602E               	cpfslt	_rx_index,c
  1249  000428  D004               	goto	l2389
  1250                           
  1251                           ;main.c: 471: uart_putc(rx);
  1252  00042A  502D               	movf	_rx,w,c
  1253  00042C  EC0D  F006         	call	_uart_putc
  1254                           
  1255                           ;main.c: 472: } else {
  1256  000430  D714               	goto	l2285
  1257  000432                     l2389:
  1258                           
  1259                           ;main.c: 474: if (chksum == 0) {
  1260  000432  5022               	movf	_chksum,w,c
  1261  000434  B4D8               	btfsc	status,2,c
  1262  000436  D00A               	goto	l2403
  1263  000438  D030               	goto	l420
  1264  00043A                     l2393:
  1265                           
  1266                           ;main.c: 478: eeprom_offset = (0) * (0x20);
  1267  00043A  0E00               	movlw	0
  1268  00043C  D005               	goto	L6
  1269  00043E                     l2395:
  1270                           
  1271                           ;main.c: 481: eeprom_offset = (1) * (0x20);
  1272  00043E  0E20               	movlw	32
  1273  000440  D003               	goto	L6
  1274  000442                     l2397:
  1275                           
  1276                           ;main.c: 484: eeprom_offset = (2) * (0x20);
  1277  000442  0E40               	movlw	64
  1278  000444  D001               	goto	L6
  1279  000446                     l2399:
  1280                           
  1281                           ;main.c: 487: eeprom_offset = (3) * (0x20);
  1282  000446  0E60               	movlw	96
  1283  000448                     L6:
  1284  000448  6E23               	movwf	_eeprom_offset,c
  1285                           
  1286                           ;main.c: 489: }
  1287                           
  1288                           ;main.c: 488: break;
  1289  00044A  D00D               	goto	l2405
  1290  00044C                     l2403:
  1291  00044C  5027               	movf	_motor_unit,w,c
  1292                           
  1293                           ; Switch size 1, requested type "space"
  1294                           ; Number of cases is 4, Range of values is 0 to 3
  1295                           ; switch strategies available:
  1296                           ; Name         Instructions Cycles
  1297                           ; simple_byte           13     7 (average)
  1298                           ;	Chosen strategy is simple_byte
  1299  00044E  0A00               	xorlw	0	; case 0
  1300  000450  B4D8               	btfsc	status,2,c
  1301  000452  D7F3               	goto	l2393
  1302  000454  0A01               	xorlw	1	; case 1
  1303  000456  B4D8               	btfsc	status,2,c
  1304  000458  D7F2               	goto	l2395
  1305  00045A  0A03               	xorlw	3	; case 2
  1306  00045C  B4D8               	btfsc	status,2,c
  1307  00045E  D7F1               	goto	l2397
  1308  000460  0A01               	xorlw	1	; case 3
  1309  000462  B4D8               	btfsc	status,2,c
  1310  000464  D7F0               	goto	l2399
  1311  000466                     l2405:
  1312                           
  1313                           ;main.c: 491: for (n = 0; n < (((((((((((((((0) + 3) + 2) + 3) + 1) + 1) + 1) + 1) + 1) 
      +                          + 1) + 1) + 1) + 2) + 2) + 1); n++) {
  1314  000466  0E00               	movlw	0
  1315  000468  6E28               	movwf	_n,c
  1316  00046A                     l2407:
  1317  00046A  0E14               	movlw	20
  1318  00046C  6428               	cpfsgt	_n,c
  1319  00046E  D001               	goto	l2411
  1320  000470  D010               	goto	l2417
  1321  000472                     l2411:
  1322                           
  1323                           ;main.c: 492: write_eeprom_data(eeprom_offset + n, rx_packet[n]);
  1324  000472  5028               	movf	_n,w,c
  1325  000474  0D01               	mullw	1
  1326  000476  0E01               	movlw	low _rx_packet
  1327  000478  24F3               	addwf	prodl,w,c
  1328  00047A  6ED9               	movwf	fsr2l,c
  1329  00047C  0E00               	movlw	high _rx_packet
  1330  00047E  20F4               	addwfc	prodh,w,c
  1331  000480  6EDA               	movwf	fsr2h,c
  1332  000482  50DF               	movf	indf2,w,c
  1333  000484  6E64               	movwf	write_eeprom_data@data,c
  1334  000486  5023               	movf	_eeprom_offset,w,c
  1335  000488  2428               	addwf	_n,w,c
  1336  00048A  ECAB  F004         	call	_write_eeprom_data
  1337  00048E  2A28               	incf	_n,f,c
  1338  000490  D7EC               	goto	l2407
  1339  000492                     l2417:
  1340                           
  1341                           ;main.c: 493: }
  1342                           ;main.c: 495: copy_from_eeprom(motor_unit);
  1343  000492  5027               	movf	_motor_unit,w,c
  1344  000494  EC8C  F002         	call	_copy_from_eeprom
  1345                           
  1346                           ;main.c: 496: } else {
  1347  000498  D002               	goto	l2419
  1348  00049A                     l420:
  1349                           
  1350                           ;main.c: 498: rx = chksum;
  1351  00049A  C022  F02D         	movff	_chksum,_rx
  1352  00049E                     l2419:
  1353                           
  1354                           ;main.c: 499: }
  1355                           ;main.c: 500: uart_putc(rx);
  1356  00049E  502D               	movf	_rx,w,c
  1357  0004A0  EC0D  F006         	call	_uart_putc
  1358  0004A4  D036               	goto	l2453
  1359  0004A6                     l2425:
  1360  0004A6  502F               	movf	_state,w,c
  1361                           
  1362                           ; Switch size 1, requested type "space"
  1363                           ; Number of cases is 2, Range of values is 0 to 1
  1364                           ; switch strategies available:
  1365                           ; Name         Instructions Cycles
  1366                           ; simple_byte            7     4 (average)
  1367                           ;	Chosen strategy is simple_byte
  1368  0004A8  0A00               	xorlw	0	; case 0
  1369  0004AA  B4D8               	btfsc	status,2,c
  1370  0004AC  D702               	goto	l2319
  1371  0004AE  0A01               	xorlw	1	; case 1
  1372  0004B0  B4D8               	btfsc	status,2,c
  1373  0004B2  D7AB               	goto	l2379
  1374                           
  1375                           ;main.c: 506: } else {
  1376  0004B4  D6D2               	goto	l2285
  1377  0004B6                     l2427:
  1378                           
  1379                           ;main.c: 508: if (!motor_enabled) {
  1380  0004B6  5026               	movf	_motor_enabled,w,c
  1381  0004B8  A4D8               	btfss	status,2,c
  1382  0004BA  D029               	goto	l437
  1383                           
  1384                           ;main.c: 510: PIR1bits.TMR1IF = 0;
  1385  0004BC  909E               	bcf	3998,0,c	;volatile
  1386                           
  1387                           ;main.c: 511: PIE1bits.TMR1IE = 0;
  1388  0004BE  909D               	bcf	3997,0,c	;volatile
  1389                           
  1390                           ;main.c: 512: do{PIE1bits.TMR1IE=0;total_1ms_tick=0;PIE1bits.TMR1IE=1;}while(0);
  1391  0004C0  909D               	bcf	3997,0,c	;volatile
  1392  0004C2  0E00               	movlw	0
  1393  0004C4  6E6D               	movwf	_total_1ms_tick+1,c
  1394  0004C6  0E00               	movlw	0
  1395  0004C8  6E6C               	movwf	_total_1ms_tick,c
  1396  0004CA  809D               	bsf	3997,0,c	;volatile
  1397                           
  1398                           ;main.c: 514: PORTB = PORTA;
  1399  0004CC  CF80 FF81          	movff	3968,3969	;volatile
  1400                           
  1401                           ;main.c: 516: for (n = (0); n <= (3); n++) {
  1402  0004D0  0E00               	movlw	0
  1403  0004D2  6E28               	movwf	_n,c
  1404  0004D4                     l2437:
  1405  0004D4  0E03               	movlw	3
  1406  0004D6  6428               	cpfsgt	_n,c
  1407  0004D8  D001               	goto	l2441
  1408  0004DA  D014               	goto	l2451
  1409  0004DC                     l2441:
  1410                           
  1411                           ;main.c: 517: if ((!blank_check(n)) && chksum_check(n)) {
  1412  0004DC  5028               	movf	_n,w,c
  1413  0004DE  EC67  F004         	call	_blank_check
  1414  0004E2  0900               	iorlw	0
  1415  0004E4  A4D8               	btfss	status,2,c
  1416  0004E6  D00C               	goto	l2447
  1417  0004E8  5028               	movf	_n,w,c
  1418  0004EA  EC33  F004         	call	_chksum_check
  1419  0004EE  0900               	iorlw	0
  1420  0004F0  B4D8               	btfsc	status,2,c
  1421  0004F2  D006               	goto	l2447
  1422                           
  1423                           ;main.c: 519: reset_position(n);
  1424  0004F4  5028               	movf	_n,w,c
  1425  0004F6  EC03  F005         	call	_reset_position
  1426                           
  1427                           ;main.c: 521: motor_enable(n);
  1428  0004FA  5028               	movf	_n,w,c
  1429  0004FC  EC1D  F006         	call	_motor_enable
  1430  000500                     l2447:
  1431  000500  2A28               	incf	_n,f,c
  1432  000502  D7E8               	goto	l2437
  1433  000504                     l2451:
  1434                           
  1435                           ;main.c: 522: }
  1436                           ;main.c: 523: }
  1437                           ;main.c: 524: motor_enabled = 1;
  1438  000504  0E01               	movlw	1
  1439  000506  6E26               	movwf	_motor_enabled,c
  1440                           
  1441                           ;main.c: 525: }
  1442                           ;main.c: 527: while (PORTCbits.RC0 == 0) {
  1443  000508  D002               	goto	l437
  1444  00050A                     l438:
  1445                           
  1446                           ;main.c: 529: PORTB = PORTA;
  1447  00050A  CF80 FF81          	movff	3968,3969	;volatile
  1448  00050E                     l437:
  1449  00050E  A082               	btfss	3970,0,c	;volatile
  1450  000510  D7FC               	goto	l438
  1451  000512                     l2453:
  1452                           
  1453                           ;main.c: 530: }
  1454                           ;main.c: 531: state = (0);
  1455  000512  0E00               	movlw	0
  1456  000514  6E2F               	movwf	_state,c
  1457                           
  1458                           ;main.c: 532: }
  1459                           ;main.c: 535: goto state_machine_entry;
  1460  000516  D6A1               	goto	l2285
  1461  000518                     __end_of_main:
  1462                           	opt stack 0
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           prodh	equ	0xFF4
  1468                           prodl	equ	0xFF3
  1469                           intcon	equ	0xFF2
  1470                           postinc0	equ	0xFEE
  1471                           wreg	equ	0xFE8
  1472                           postdec1	equ	0xFE5
  1473                           fsr1l	equ	0xFE1
  1474                           indf2	equ	0xFDF
  1475                           fsr2h	equ	0xFDA
  1476                           fsr2l	equ	0xFD9
  1477                           status	equ	0xFD8
  1478                           
  1479 ;; *************** function _write_eeprom_data *****************
  1480 ;; Defined at:
  1481 ;;		line 22 in file "src/eeprom.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  addr            1    wreg     unsigned char 
  1484 ;;  data            1   14[COMRAM] unsigned char 
  1485 ;; Auto vars:     Size  Location     Type
  1486 ;;  addr            1   15[COMRAM] unsigned char 
  1487 ;; Return value:  Size  Location     Type
  1488 ;;                  1    wreg      void 
  1489 ;; Registers used:
  1490 ;;		wreg, status,2
  1491 ;; Tracked objects:
  1492 ;;		On entry : 0/0
  1493 ;;		On exit  : 0/0
  1494 ;;		Unchanged: 0/0
  1495 ;; Data sizes:     COMRAM   BANK0   BANK1
  1496 ;;      Params:         1       0       0
  1497 ;;      Locals:         1       0       0
  1498 ;;      Temps:          0       0       0
  1499 ;;      Totals:         2       0       0
  1500 ;;Total ram usage:        2 bytes
  1501 ;; Hardware stack levels used:    1
  1502 ;; Hardware stack levels required when called:    1
  1503 ;; This function calls:
  1504 ;;		Nothing
  1505 ;; This function is called by:
  1506 ;;		_main
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text1
  1511  000956                     __ptext1:
  1512                           	opt stack 0
  1513  000956                     _write_eeprom_data:
  1514                           	opt stack 29
  1515                           
  1516                           ;incstack = 0
  1517                           ;write_eeprom_data@addr stored from wreg
  1518  000956  6E65               	movwf	write_eeprom_data@addr,c
  1519                           
  1520                           ;eeprom.c: 41: PIR2bits.EEIF = 0;
  1521  000958  98A1               	bcf	4001,4,c	;volatile
  1522                           
  1523                           ;eeprom.c: 42: EEADR = addr;
  1524  00095A  C065  FFA9         	movff	write_eeprom_data@addr,4009	;volatile
  1525                           
  1526                           ;eeprom.c: 43: EEDATA = data;
  1527  00095E  C064  FFA8         	movff	write_eeprom_data@data,4008	;volatile
  1528                           
  1529                           ;eeprom.c: 44: EECON1bits.EEPGD = 0;
  1530  000962  9EA6               	bcf	4006,7,c	;volatile
  1531                           
  1532                           ;eeprom.c: 45: EECON1bits.CFGS = 0;
  1533  000964  9CA6               	bcf	4006,6,c	;volatile
  1534                           
  1535                           ;eeprom.c: 46: EECON1bits.WREN = 1;
  1536  000966  84A6               	bsf	4006,2,c	;volatile
  1537                           
  1538                           ;eeprom.c: 47: INTCONbits.GIE = 0;
  1539  000968  9EF2               	bcf	intcon,7,c	;volatile
  1540                           
  1541                           ;eeprom.c: 48: EECON2 = 0x55;
  1542  00096A  0E55               	movlw	85
  1543  00096C  6EA7               	movwf	4007,c	;volatile
  1544                           
  1545                           ;eeprom.c: 49: EECON2 = 0xAA;
  1546  00096E  0EAA               	movlw	170
  1547  000970  6EA7               	movwf	4007,c	;volatile
  1548                           
  1549                           ;eeprom.c: 50: EECON1bits.WR = 1;
  1550  000972  82A6               	bsf	4006,1,c	;volatile
  1551  000974                     l198:
  1552  000974  A8A1               	btfss	4001,4,c	;volatile
  1553  000976  D7FE               	goto	l198
  1554                           
  1555                           ;eeprom.c: 52: INTCONbits.GIE = 1;
  1556  000978  8EF2               	bsf	intcon,7,c	;volatile
  1557                           
  1558                           ;eeprom.c: 53: EECON1bits.WREN = 0;
  1559  00097A  94A6               	bcf	4006,2,c	;volatile
  1560  00097C  0012               	return		;funcret
  1561  00097E                     __end_of_write_eeprom_data:
  1562                           	opt stack 0
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           prodh	equ	0xFF4
  1568                           prodl	equ	0xFF3
  1569                           intcon	equ	0xFF2
  1570                           postinc0	equ	0xFEE
  1571                           wreg	equ	0xFE8
  1572                           postdec1	equ	0xFE5
  1573                           fsr1l	equ	0xFE1
  1574                           indf2	equ	0xFDF
  1575                           fsr2h	equ	0xFDA
  1576                           fsr2l	equ	0xFD9
  1577                           status	equ	0xFD8
  1578                           
  1579 ;; *************** function _uart_putc *****************
  1580 ;; Defined at:
  1581 ;;		line 5 in file "src/serial.c"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;  byte            1    wreg     unsigned char 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  byte            1   14[COMRAM] unsigned char 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  1    wreg      void 
  1588 ;; Registers used:
  1589 ;;		wreg
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMRAM   BANK0   BANK1
  1595 ;;      Params:         0       0       0
  1596 ;;      Locals:         1       0       0
  1597 ;;      Temps:          0       0       0
  1598 ;;      Totals:         1       0       0
  1599 ;;Total ram usage:        1 bytes
  1600 ;; Hardware stack levels used:    1
  1601 ;; Hardware stack levels required when called:    1
  1602 ;; This function calls:
  1603 ;;		Nothing
  1604 ;; This function is called by:
  1605 ;;		_main
  1606 ;;		_uart_puts
  1607 ;;		_uart_p2x
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text2
  1612  000C1A                     __ptext2:
  1613                           	opt stack 0
  1614  000C1A                     _uart_putc:
  1615                           	opt stack 29
  1616                           
  1617                           ;incstack = 0
  1618                           ;uart_putc@byte stored from wreg
  1619  000C1A  6E64               	movwf	uart_putc@byte,c
  1620  000C1C                     l449:
  1621  000C1C  A89E               	btfss	3998,4,c	;volatile
  1622  000C1E  D7FE               	goto	l449
  1623                           
  1624                           ;serial.c: 7: TXREG = byte;
  1625  000C20  C064  FFAD         	movff	uart_putc@byte,4013	;volatile
  1626  000C24                     l452:
  1627  000C24  B89E               	btfsc	3998,4,c	;volatile
  1628  000C26  0012               	return	
  1629  000C28  D7FD               	goto	l452
  1630  000C2A                     __end_of_uart_putc:
  1631                           	opt stack 0
  1632                           tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           tblptrl	equ	0xFF6
  1635                           tablat	equ	0xFF5
  1636                           prodh	equ	0xFF4
  1637                           prodl	equ	0xFF3
  1638                           intcon	equ	0xFF2
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           postdec1	equ	0xFE5
  1642                           fsr1l	equ	0xFE1
  1643                           indf2	equ	0xFDF
  1644                           fsr2h	equ	0xFDA
  1645                           fsr2l	equ	0xFD9
  1646                           status	equ	0xFD8
  1647                           
  1648 ;; *************** function _uart_getc *****************
  1649 ;; Defined at:
  1650 ;;		line 18 in file "src/serial.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  c               1   14[COMRAM] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      unsigned char 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1
  1664 ;;      Params:         0       0       0
  1665 ;;      Locals:         1       0       0
  1666 ;;      Temps:          0       0       0
  1667 ;;      Totals:         1       0       0
  1668 ;;Total ram usage:        1 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    1
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text3
  1679  000C56                     __ptext3:
  1680                           	opt stack 0
  1681  000C56                     _uart_getc:
  1682                           	opt stack 29
  1683  000C56                     l464:
  1684  000C56  AA9E               	btfss	3998,5,c	;volatile
  1685  000C58  D7FE               	goto	l464
  1686                           
  1687                           ;serial.c: 21: c = RCREG;
  1688  000C5A  CFAE F064          	movff	4014,uart_getc@c	;volatile
  1689                           
  1690                           ;serial.c: 22: return c;
  1691  000C5E  5064               	movf	uart_getc@c,w,c
  1692  000C60  0012               	return	
  1693  000C62                     __end_of_uart_getc:
  1694                           	opt stack 0
  1695                           tblptru	equ	0xFF8
  1696                           tblptrh	equ	0xFF7
  1697                           tblptrl	equ	0xFF6
  1698                           tablat	equ	0xFF5
  1699                           prodh	equ	0xFF4
  1700                           prodl	equ	0xFF3
  1701                           intcon	equ	0xFF2
  1702                           postinc0	equ	0xFEE
  1703                           wreg	equ	0xFE8
  1704                           postdec1	equ	0xFE5
  1705                           fsr1l	equ	0xFE1
  1706                           indf2	equ	0xFDF
  1707                           fsr2h	equ	0xFDA
  1708                           fsr2l	equ	0xFD9
  1709                           status	equ	0xFD8
  1710                           
  1711 ;; *************** function _reset_position *****************
  1712 ;; Defined at:
  1713 ;;		line 246 in file "src/L6474.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  unit            1    wreg     unsigned char 
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;  unit            1   21[COMRAM] unsigned char 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  1    wreg      void 
  1720 ;; Registers used:
  1721 ;;		wreg, status,2, status,0, cstack
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1
  1727 ;;      Params:         0       0       0
  1728 ;;      Locals:         1       0       0
  1729 ;;      Temps:          0       0       0
  1730 ;;      Totals:         1       0       0
  1731 ;;Total ram usage:        1 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:    4
  1734 ;; This function calls:
  1735 ;;		_set_abs_pos
  1736 ;;		_set_el_pos
  1737 ;; This function is called by:
  1738 ;;		_main
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742                           	psect	text4
  1743  000A06                     __ptext4:
  1744                           	opt stack 0
  1745  000A06                     _reset_position:
  1746                           	opt stack 26
  1747                           
  1748                           ;incstack = 0
  1749                           ;reset_position@unit stored from wreg
  1750  000A06  6E6B               	movwf	reset_position@unit,c
  1751                           
  1752                           ;L6474.c: 247: param1 = 0;
  1753  000A08  0E00               	movlw	0
  1754  000A0A  6E2A               	movwf	_param1,c
  1755                           
  1756                           ;L6474.c: 248: param2 = 0;
  1757  000A0C  0E00               	movlw	0
  1758  000A0E  6E2B               	movwf	_param2,c
  1759                           
  1760                           ;L6474.c: 249: param3 = 0;
  1761  000A10  0E00               	movlw	0
  1762  000A12  6E2C               	movwf	_param3,c
  1763                           
  1764                           ;L6474.c: 250: set_abs_pos(unit);
  1765  000A14  506B               	movf	reset_position@unit,w,c
  1766  000A16  EC95  F004         	call	_set_abs_pos
  1767                           
  1768                           ;L6474.c: 251: set_el_pos(unit);
  1769  000A1A  506B               	movf	reset_position@unit,w,c
  1770  000A1C  ECD2  F004         	call	_set_el_pos
  1771  000A20  0012               	return		;funcret
  1772  000A22                     __end_of_reset_position:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           prodh	equ	0xFF4
  1779                           prodl	equ	0xFF3
  1780                           intcon	equ	0xFF2
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1l	equ	0xFE1
  1785                           indf2	equ	0xFDF
  1786                           fsr2h	equ	0xFDA
  1787                           fsr2l	equ	0xFD9
  1788                           status	equ	0xFD8
  1789                           
  1790 ;; *************** function _motor_enable *****************
  1791 ;; Defined at:
  1792 ;;		line 254 in file "src/L6474.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  unit            1    wreg     unsigned char 
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;  unit            1   20[COMRAM] unsigned char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1
  1806 ;;      Params:         0       0       0
  1807 ;;      Locals:         1       0       0
  1808 ;;      Temps:          0       0       0
  1809 ;;      Totals:         1       0       0
  1810 ;;Total ram usage:        1 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    3
  1813 ;; This function calls:
  1814 ;;		_write_spi_chain
  1815 ;; This function is called by:
  1816 ;;		_main
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text5
  1821  000C3A                     __ptext5:
  1822                           	opt stack 0
  1823  000C3A                     _motor_enable:
  1824                           	opt stack 27
  1825                           
  1826                           ;incstack = 0
  1827                           ;motor_enable@unit stored from wreg
  1828  000C3A  6E6A               	movwf	motor_enable@unit,c
  1829                           
  1830                           ;L6474.c: 255: write_spi_chain((0xB8), unit);
  1831  000C3C  C06A  F068         	movff	motor_enable@unit,write_spi_chain@unit
  1832  000C40  0EB8               	movlw	184
  1833  000C42  EC64  F003         	call	_write_spi_chain
  1834  000C46  0012               	return		;funcret
  1835  000C48                     __end_of_motor_enable:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           prodh	equ	0xFF4
  1842                           prodl	equ	0xFF3
  1843                           intcon	equ	0xFF2
  1844                           postinc0	equ	0xFEE
  1845                           wreg	equ	0xFE8
  1846                           postdec1	equ	0xFE5
  1847                           fsr1l	equ	0xFE1
  1848                           indf2	equ	0xFDF
  1849                           fsr2h	equ	0xFDA
  1850                           fsr2l	equ	0xFD9
  1851                           status	equ	0xFD8
  1852                           
  1853 ;; *************** function _motor_disable *****************
  1854 ;; Defined at:
  1855 ;;		line 258 in file "src/L6474.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  unit            1    wreg     unsigned char 
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;  unit            1   20[COMRAM] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1
  1869 ;;      Params:         0       0       0
  1870 ;;      Locals:         1       0       0
  1871 ;;      Temps:          0       0       0
  1872 ;;      Totals:         1       0       0
  1873 ;;Total ram usage:        1 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    3
  1876 ;; This function calls:
  1877 ;;		_write_spi_chain
  1878 ;; This function is called by:
  1879 ;;		_main
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text6
  1884  000C48                     __ptext6:
  1885                           	opt stack 0
  1886  000C48                     _motor_disable:
  1887                           	opt stack 27
  1888                           
  1889                           ;incstack = 0
  1890                           ;motor_disable@unit stored from wreg
  1891  000C48  6E6A               	movwf	motor_disable@unit,c
  1892                           
  1893                           ;L6474.c: 259: write_spi_chain((0xA8), unit);
  1894  000C4A  C06A  F068         	movff	motor_disable@unit,write_spi_chain@unit
  1895  000C4E  0EA8               	movlw	168
  1896  000C50  EC64  F003         	call	_write_spi_chain
  1897  000C54  0012               	return		;funcret
  1898  000C56                     __end_of_motor_disable:
  1899                           	opt stack 0
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           prodh	equ	0xFF4
  1905                           prodl	equ	0xFF3
  1906                           intcon	equ	0xFF2
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           postdec1	equ	0xFE5
  1910                           fsr1l	equ	0xFE1
  1911                           indf2	equ	0xFDF
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916 ;; *************** function _get_tval *****************
  1917 ;; Defined at:
  1918 ;;		line 152 in file "src/L6474.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  unit            1    wreg     unsigned char 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  unit            1   21[COMRAM] unsigned char 
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  1    wreg      void 
  1925 ;; Registers used:
  1926 ;;		wreg, status,2, status,0, cstack
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMRAM   BANK0   BANK1
  1932 ;;      Params:         0       0       0
  1933 ;;      Locals:         1       0       0
  1934 ;;      Temps:          0       0       0
  1935 ;;      Totals:         1       0       0
  1936 ;;Total ram usage:        1 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    4
  1939 ;; This function calls:
  1940 ;;		_read_spi_chain
  1941 ;;		_write_spi_chain
  1942 ;; This function is called by:
  1943 ;;		_main
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text7
  1948  000A22                     __ptext7:
  1949                           	opt stack 0
  1950  000A22                     _get_tval:
  1951                           	opt stack 26
  1952                           
  1953                           ;incstack = 0
  1954                           ;get_tval@unit stored from wreg
  1955  000A22  6E6B               	movwf	get_tval@unit,c
  1956                           
  1957                           ;L6474.c: 153: write_spi_chain((0x20) | (0x09), unit);
  1958  000A24  C06B  F068         	movff	get_tval@unit,write_spi_chain@unit
  1959  000A28  0E29               	movlw	41
  1960  000A2A  EC64  F003         	call	_write_spi_chain
  1961                           
  1962                           ;L6474.c: 154: read_spi_chain(1, unit);
  1963  000A2E  C06B  F069         	movff	get_tval@unit,read_spi_chain@unit
  1964  000A32  0E01               	movlw	1
  1965  000A34  ECD3  F003         	call	_read_spi_chain
  1966  000A38  0012               	return		;funcret
  1967  000A3A                     __end_of_get_tval:
  1968                           	opt stack 0
  1969                           tblptru	equ	0xFF8
  1970                           tblptrh	equ	0xFF7
  1971                           tblptrl	equ	0xFF6
  1972                           tablat	equ	0xFF5
  1973                           prodh	equ	0xFF4
  1974                           prodl	equ	0xFF3
  1975                           intcon	equ	0xFF2
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postdec1	equ	0xFE5
  1979                           fsr1l	equ	0xFE1
  1980                           indf2	equ	0xFDF
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _get_ton_min *****************
  1986 ;; Defined at:
  1987 ;;		line 174 in file "src/L6474.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  unit            1    wreg     unsigned char 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  unit            1   21[COMRAM] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, status,2, status,0, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1
  2001 ;;      Params:         0       0       0
  2002 ;;      Locals:         1       0       0
  2003 ;;      Temps:          0       0       0
  2004 ;;      Totals:         1       0       0
  2005 ;;Total ram usage:        1 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    4
  2008 ;; This function calls:
  2009 ;;		_read_spi_chain
  2010 ;;		_write_spi_chain
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text8
  2017  000A3A                     __ptext8:
  2018                           	opt stack 0
  2019  000A3A                     _get_ton_min:
  2020                           	opt stack 26
  2021                           
  2022                           ;incstack = 0
  2023                           ;get_ton_min@unit stored from wreg
  2024  000A3A  6E6B               	movwf	get_ton_min@unit,c
  2025                           
  2026                           ;L6474.c: 175: write_spi_chain((0x20) | (0x0F), unit);
  2027  000A3C  C06B  F068         	movff	get_ton_min@unit,write_spi_chain@unit
  2028  000A40  0E2F               	movlw	47
  2029  000A42  EC64  F003         	call	_write_spi_chain
  2030                           
  2031                           ;L6474.c: 176: read_spi_chain(1, unit);
  2032  000A46  C06B  F069         	movff	get_ton_min@unit,read_spi_chain@unit
  2033  000A4A  0E01               	movlw	1
  2034  000A4C  ECD3  F003         	call	_read_spi_chain
  2035  000A50  0012               	return		;funcret
  2036  000A52                     __end_of_get_ton_min:
  2037                           	opt stack 0
  2038                           tblptru	equ	0xFF8
  2039                           tblptrh	equ	0xFF7
  2040                           tblptrl	equ	0xFF6
  2041                           tablat	equ	0xFF5
  2042                           prodh	equ	0xFF4
  2043                           prodl	equ	0xFF3
  2044                           intcon	equ	0xFF2
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           postdec1	equ	0xFE5
  2048                           fsr1l	equ	0xFE1
  2049                           indf2	equ	0xFDF
  2050                           fsr2h	equ	0xFDA
  2051                           fsr2l	equ	0xFD9
  2052                           status	equ	0xFD8
  2053                           
  2054 ;; *************** function _get_toff_min *****************
  2055 ;; Defined at:
  2056 ;;		line 185 in file "src/L6474.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  unit            1    wreg     unsigned char 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  unit            1   21[COMRAM] unsigned char 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2, status,0, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1
  2070 ;;      Params:         0       0       0
  2071 ;;      Locals:         1       0       0
  2072 ;;      Temps:          0       0       0
  2073 ;;      Totals:         1       0       0
  2074 ;;Total ram usage:        1 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    4
  2077 ;; This function calls:
  2078 ;;		_read_spi_chain
  2079 ;;		_write_spi_chain
  2080 ;; This function is called by:
  2081 ;;		_main
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           	psect	text9
  2086  000A52                     __ptext9:
  2087                           	opt stack 0
  2088  000A52                     _get_toff_min:
  2089                           	opt stack 26
  2090                           
  2091                           ;incstack = 0
  2092                           ;get_toff_min@unit stored from wreg
  2093  000A52  6E6B               	movwf	get_toff_min@unit,c
  2094                           
  2095                           ;L6474.c: 186: write_spi_chain((0x20) | (0x10), unit);
  2096  000A54  C06B  F068         	movff	get_toff_min@unit,write_spi_chain@unit
  2097  000A58  0E30               	movlw	48
  2098  000A5A  EC64  F003         	call	_write_spi_chain
  2099                           
  2100                           ;L6474.c: 187: read_spi_chain(1, unit);
  2101  000A5E  C06B  F069         	movff	get_toff_min@unit,read_spi_chain@unit
  2102  000A62  0E01               	movlw	1
  2103  000A64  ECD3  F003         	call	_read_spi_chain
  2104  000A68  0012               	return		;funcret
  2105  000A6A                     __end_of_get_toff_min:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           tblptrh	equ	0xFF7
  2109                           tblptrl	equ	0xFF6
  2110                           tablat	equ	0xFF5
  2111                           prodh	equ	0xFF4
  2112                           prodl	equ	0xFF3
  2113                           intcon	equ	0xFF2
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           postdec1	equ	0xFE5
  2117                           fsr1l	equ	0xFE1
  2118                           indf2	equ	0xFDF
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function _get_t_fast *****************
  2124 ;; Defined at:
  2125 ;;		line 163 in file "src/L6474.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  unit            1    wreg     unsigned char 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  unit            1   21[COMRAM] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  1    wreg      void 
  2132 ;; Registers used:
  2133 ;;		wreg, status,2, status,0, cstack
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1
  2139 ;;      Params:         0       0       0
  2140 ;;      Locals:         1       0       0
  2141 ;;      Temps:          0       0       0
  2142 ;;      Totals:         1       0       0
  2143 ;;Total ram usage:        1 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    4
  2146 ;; This function calls:
  2147 ;;		_read_spi_chain
  2148 ;;		_write_spi_chain
  2149 ;; This function is called by:
  2150 ;;		_main
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text10
  2155  000A6A                     __ptext10:
  2156                           	opt stack 0
  2157  000A6A                     _get_t_fast:
  2158                           	opt stack 26
  2159                           
  2160                           ;incstack = 0
  2161                           ;get_t_fast@unit stored from wreg
  2162  000A6A  6E6B               	movwf	get_t_fast@unit,c
  2163                           
  2164                           ;L6474.c: 164: write_spi_chain((0x20) | (0x0E), unit);
  2165  000A6C  C06B  F068         	movff	get_t_fast@unit,write_spi_chain@unit
  2166  000A70  0E2E               	movlw	46
  2167  000A72  EC64  F003         	call	_write_spi_chain
  2168                           
  2169                           ;L6474.c: 165: read_spi_chain(1, unit);
  2170  000A76  C06B  F069         	movff	get_t_fast@unit,read_spi_chain@unit
  2171  000A7A  0E01               	movlw	1
  2172  000A7C  ECD3  F003         	call	_read_spi_chain
  2173  000A80  0012               	return		;funcret
  2174  000A82                     __end_of_get_t_fast:
  2175                           	opt stack 0
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           postdec1	equ	0xFE5
  2186                           fsr1l	equ	0xFE1
  2187                           indf2	equ	0xFDF
  2188                           fsr2h	equ	0xFDA
  2189                           fsr2l	equ	0xFD9
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _get_step_mode *****************
  2193 ;; Defined at:
  2194 ;;		line 218 in file "src/L6474.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  unit            1    wreg     unsigned char 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  unit            1   21[COMRAM] unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		wreg, status,2, status,0, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1
  2208 ;;      Params:         0       0       0
  2209 ;;      Locals:         1       0       0
  2210 ;;      Temps:          0       0       0
  2211 ;;      Totals:         1       0       0
  2212 ;;Total ram usage:        1 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    4
  2215 ;; This function calls:
  2216 ;;		_read_spi_chain
  2217 ;;		_write_spi_chain
  2218 ;; This function is called by:
  2219 ;;		_main
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text11
  2224  000A82                     __ptext11:
  2225                           	opt stack 0
  2226  000A82                     _get_step_mode:
  2227                           	opt stack 26
  2228                           
  2229                           ;incstack = 0
  2230                           ;get_step_mode@unit stored from wreg
  2231  000A82  6E6B               	movwf	get_step_mode@unit,c
  2232                           
  2233                           ;L6474.c: 219: write_spi_chain((0x20) | (0x16), unit);
  2234  000A84  C06B  F068         	movff	get_step_mode@unit,write_spi_chain@unit
  2235  000A88  0E36               	movlw	54
  2236  000A8A  EC64  F003         	call	_write_spi_chain
  2237                           
  2238                           ;L6474.c: 220: read_spi_chain(1, unit);
  2239  000A8E  C06B  F069         	movff	get_step_mode@unit,read_spi_chain@unit
  2240  000A92  0E01               	movlw	1
  2241  000A94  ECD3  F003         	call	_read_spi_chain
  2242  000A98  0012               	return		;funcret
  2243  000A9A                     __end_of_get_step_mode:
  2244                           	opt stack 0
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           prodh	equ	0xFF4
  2250                           prodl	equ	0xFF3
  2251                           intcon	equ	0xFF2
  2252                           postinc0	equ	0xFEE
  2253                           wreg	equ	0xFE8
  2254                           postdec1	equ	0xFE5
  2255                           fsr1l	equ	0xFE1
  2256                           indf2	equ	0xFDF
  2257                           fsr2h	equ	0xFDA
  2258                           fsr2l	equ	0xFD9
  2259                           status	equ	0xFD8
  2260                           
  2261 ;; *************** function _get_status *****************
  2262 ;; Defined at:
  2263 ;;		line 262 in file "src/L6474.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;  unit            1    wreg     unsigned char 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  unit            1   21[COMRAM] unsigned char 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, status,2, status,0, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1
  2277 ;;      Params:         0       0       0
  2278 ;;      Locals:         1       0       0
  2279 ;;      Temps:          0       0       0
  2280 ;;      Totals:         1       0       0
  2281 ;;Total ram usage:        1 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    4
  2284 ;; This function calls:
  2285 ;;		_read_spi_chain
  2286 ;;		_write_spi_chain
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           	psect	text12
  2293  000A9A                     __ptext12:
  2294                           	opt stack 0
  2295  000A9A                     _get_status:
  2296                           	opt stack 26
  2297                           
  2298                           ;incstack = 0
  2299                           ;get_status@unit stored from wreg
  2300  000A9A  6E6B               	movwf	get_status@unit,c
  2301                           
  2302                           ;L6474.c: 263: write_spi_chain((0xD0), unit);
  2303  000A9C  C06B  F068         	movff	get_status@unit,write_spi_chain@unit
  2304  000AA0  0ED0               	movlw	208
  2305  000AA2  EC64  F003         	call	_write_spi_chain
  2306                           
  2307                           ;L6474.c: 264: read_spi_chain(2, unit);
  2308  000AA6  C06B  F069         	movff	get_status@unit,read_spi_chain@unit
  2309  000AAA  0E02               	movlw	2
  2310  000AAC  ECD3  F003         	call	_read_spi_chain
  2311  000AB0  0012               	return		;funcret
  2312  000AB2                     __end_of_get_status:
  2313                           	opt stack 0
  2314                           tblptru	equ	0xFF8
  2315                           tblptrh	equ	0xFF7
  2316                           tblptrl	equ	0xFF6
  2317                           tablat	equ	0xFF5
  2318                           prodh	equ	0xFF4
  2319                           prodl	equ	0xFF3
  2320                           intcon	equ	0xFF2
  2321                           postinc0	equ	0xFEE
  2322                           wreg	equ	0xFE8
  2323                           postdec1	equ	0xFE5
  2324                           fsr1l	equ	0xFE1
  2325                           indf2	equ	0xFDF
  2326                           fsr2h	equ	0xFDA
  2327                           fsr2l	equ	0xFD9
  2328                           status	equ	0xFD8
  2329                           
  2330 ;; *************** function _get_ocd_th *****************
  2331 ;; Defined at:
  2332 ;;		line 207 in file "src/L6474.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;  unit            1    wreg     unsigned char 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  unit            1   21[COMRAM] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      void 
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1
  2346 ;;      Params:         0       0       0
  2347 ;;      Locals:         1       0       0
  2348 ;;      Temps:          0       0       0
  2349 ;;      Totals:         1       0       0
  2350 ;;Total ram usage:        1 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    4
  2353 ;; This function calls:
  2354 ;;		_read_spi_chain
  2355 ;;		_write_spi_chain
  2356 ;; This function is called by:
  2357 ;;		_main
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           	psect	text13
  2362  000AB2                     __ptext13:
  2363                           	opt stack 0
  2364  000AB2                     _get_ocd_th:
  2365                           	opt stack 26
  2366                           
  2367                           ;incstack = 0
  2368                           ;get_ocd_th@unit stored from wreg
  2369  000AB2  6E6B               	movwf	get_ocd_th@unit,c
  2370                           
  2371                           ;L6474.c: 208: write_spi_chain((0x20) | (0x13), unit);
  2372  000AB4  C06B  F068         	movff	get_ocd_th@unit,write_spi_chain@unit
  2373  000AB8  0E33               	movlw	51
  2374  000ABA  EC64  F003         	call	_write_spi_chain
  2375                           
  2376                           ;L6474.c: 209: read_spi_chain(1, unit);
  2377  000ABE  C06B  F069         	movff	get_ocd_th@unit,read_spi_chain@unit
  2378  000AC2  0E01               	movlw	1
  2379  000AC4  ECD3  F003         	call	_read_spi_chain
  2380  000AC8  0012               	return		;funcret
  2381  000ACA                     __end_of_get_ocd_th:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           intcon	equ	0xFF2
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           postdec1	equ	0xFE5
  2393                           fsr1l	equ	0xFE1
  2394                           indf2	equ	0xFDF
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function _get_mark *****************
  2400 ;; Defined at:
  2401 ;;		line 141 in file "src/L6474.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  unit            1    wreg     unsigned char 
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  unit            1   21[COMRAM] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, status,2, status,0, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1
  2415 ;;      Params:         0       0       0
  2416 ;;      Locals:         1       0       0
  2417 ;;      Temps:          0       0       0
  2418 ;;      Totals:         1       0       0
  2419 ;;Total ram usage:        1 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    4
  2422 ;; This function calls:
  2423 ;;		_read_spi_chain
  2424 ;;		_write_spi_chain
  2425 ;; This function is called by:
  2426 ;;		_main
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text14
  2431  000ACA                     __ptext14:
  2432                           	opt stack 0
  2433  000ACA                     _get_mark:
  2434                           	opt stack 26
  2435                           
  2436                           ;incstack = 0
  2437                           ;get_mark@unit stored from wreg
  2438  000ACA  6E6B               	movwf	get_mark@unit,c
  2439                           
  2440                           ;L6474.c: 142: write_spi_chain((0x20) | (0x03), unit);
  2441  000ACC  C06B  F068         	movff	get_mark@unit,write_spi_chain@unit
  2442  000AD0  0E23               	movlw	35
  2443  000AD2  EC64  F003         	call	_write_spi_chain
  2444                           
  2445                           ;L6474.c: 143: read_spi_chain(3, unit);
  2446  000AD6  C06B  F069         	movff	get_mark@unit,read_spi_chain@unit
  2447  000ADA  0E03               	movlw	3
  2448  000ADC  ECD3  F003         	call	_read_spi_chain
  2449  000AE0  0012               	return		;funcret
  2450  000AE2                     __end_of_get_mark:
  2451                           	opt stack 0
  2452                           tblptru	equ	0xFF8
  2453                           tblptrh	equ	0xFF7
  2454                           tblptrl	equ	0xFF6
  2455                           tablat	equ	0xFF5
  2456                           prodh	equ	0xFF4
  2457                           prodl	equ	0xFF3
  2458                           intcon	equ	0xFF2
  2459                           postinc0	equ	0xFEE
  2460                           wreg	equ	0xFE8
  2461                           postdec1	equ	0xFE5
  2462                           fsr1l	equ	0xFE1
  2463                           indf2	equ	0xFDF
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _get_el_pos *****************
  2469 ;; Defined at:
  2470 ;;		line 127 in file "src/L6474.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  unit            1    wreg     unsigned char 
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  unit            1   21[COMRAM] unsigned char 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  1    wreg      void 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, status,0, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1
  2484 ;;      Params:         0       0       0
  2485 ;;      Locals:         1       0       0
  2486 ;;      Temps:          0       0       0
  2487 ;;      Totals:         1       0       0
  2488 ;;Total ram usage:        1 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    4
  2491 ;; This function calls:
  2492 ;;		_read_spi_chain
  2493 ;;		_write_spi_chain
  2494 ;; This function is called by:
  2495 ;;		_main
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text15
  2500  000AE2                     __ptext15:
  2501                           	opt stack 0
  2502  000AE2                     _get_el_pos:
  2503                           	opt stack 26
  2504                           
  2505                           ;incstack = 0
  2506                           ;get_el_pos@unit stored from wreg
  2507  000AE2  6E6B               	movwf	get_el_pos@unit,c
  2508                           
  2509                           ;L6474.c: 129: write_spi_chain((0x20) | (0x02), unit);
  2510  000AE4  C06B  F068         	movff	get_el_pos@unit,write_spi_chain@unit
  2511  000AE8  0E22               	movlw	34
  2512  000AEA  EC64  F003         	call	_write_spi_chain
  2513                           
  2514                           ;L6474.c: 130: read_spi_chain(2, unit);
  2515  000AEE  C06B  F069         	movff	get_el_pos@unit,read_spi_chain@unit
  2516  000AF2  0E02               	movlw	2
  2517  000AF4  ECD3  F003         	call	_read_spi_chain
  2518  000AF8  0012               	return		;funcret
  2519  000AFA                     __end_of_get_el_pos:
  2520                           	opt stack 0
  2521                           tblptru	equ	0xFF8
  2522                           tblptrh	equ	0xFF7
  2523                           tblptrl	equ	0xFF6
  2524                           tablat	equ	0xFF5
  2525                           prodh	equ	0xFF4
  2526                           prodl	equ	0xFF3
  2527                           intcon	equ	0xFF2
  2528                           postinc0	equ	0xFEE
  2529                           wreg	equ	0xFE8
  2530                           postdec1	equ	0xFE5
  2531                           fsr1l	equ	0xFE1
  2532                           indf2	equ	0xFDF
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _get_config *****************
  2538 ;; Defined at:
  2539 ;;		line 241 in file "src/L6474.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  unit            1    wreg     unsigned char 
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;  unit            1   21[COMRAM] unsigned char 
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  1    wreg      void 
  2546 ;; Registers used:
  2547 ;;		wreg, status,2, status,0, cstack
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMRAM   BANK0   BANK1
  2553 ;;      Params:         0       0       0
  2554 ;;      Locals:         1       0       0
  2555 ;;      Temps:          0       0       0
  2556 ;;      Totals:         1       0       0
  2557 ;;Total ram usage:        1 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    4
  2560 ;; This function calls:
  2561 ;;		_read_spi_chain
  2562 ;;		_write_spi_chain
  2563 ;; This function is called by:
  2564 ;;		_main
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text16
  2569  000AFA                     __ptext16:
  2570                           	opt stack 0
  2571  000AFA                     _get_config:
  2572                           	opt stack 26
  2573                           
  2574                           ;incstack = 0
  2575                           ;get_config@unit stored from wreg
  2576  000AFA  6E6B               	movwf	get_config@unit,c
  2577                           
  2578                           ;L6474.c: 242: write_spi_chain((0x20) | (0x18), unit);
  2579  000AFC  C06B  F068         	movff	get_config@unit,write_spi_chain@unit
  2580  000B00  0E38               	movlw	56
  2581  000B02  EC64  F003         	call	_write_spi_chain
  2582                           
  2583                           ;L6474.c: 243: read_spi_chain(2, unit);
  2584  000B06  C06B  F069         	movff	get_config@unit,read_spi_chain@unit
  2585  000B0A  0E02               	movlw	2
  2586  000B0C  ECD3  F003         	call	_read_spi_chain
  2587  000B10  0012               	return		;funcret
  2588  000B12                     __end_of_get_config:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           intcon	equ	0xFF2
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           postdec1	equ	0xFE5
  2600                           fsr1l	equ	0xFE1
  2601                           indf2	equ	0xFDF
  2602                           fsr2h	equ	0xFDA
  2603                           fsr2l	equ	0xFD9
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _get_alarm_en *****************
  2607 ;; Defined at:
  2608 ;;		line 229 in file "src/L6474.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  unit            1    wreg     unsigned char 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  unit            1   21[COMRAM] unsigned char 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1
  2622 ;;      Params:         0       0       0
  2623 ;;      Locals:         1       0       0
  2624 ;;      Temps:          0       0       0
  2625 ;;      Totals:         1       0       0
  2626 ;;Total ram usage:        1 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    4
  2629 ;; This function calls:
  2630 ;;		_read_spi_chain
  2631 ;;		_write_spi_chain
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text17
  2638  000B12                     __ptext17:
  2639                           	opt stack 0
  2640  000B12                     _get_alarm_en:
  2641                           	opt stack 26
  2642                           
  2643                           ;incstack = 0
  2644                           ;get_alarm_en@unit stored from wreg
  2645  000B12  6E6B               	movwf	get_alarm_en@unit,c
  2646                           
  2647                           ;L6474.c: 230: write_spi_chain((0x20) | (0x17), unit);
  2648  000B14  C06B  F068         	movff	get_alarm_en@unit,write_spi_chain@unit
  2649  000B18  0E37               	movlw	55
  2650  000B1A  EC64  F003         	call	_write_spi_chain
  2651                           
  2652                           ;L6474.c: 231: read_spi_chain(1, unit);
  2653  000B1E  C06B  F069         	movff	get_alarm_en@unit,read_spi_chain@unit
  2654  000B22  0E01               	movlw	1
  2655  000B24  ECD3  F003         	call	_read_spi_chain
  2656  000B28  0012               	return		;funcret
  2657  000B2A                     __end_of_get_alarm_en:
  2658                           	opt stack 0
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           prodh	equ	0xFF4
  2664                           prodl	equ	0xFF3
  2665                           intcon	equ	0xFF2
  2666                           postinc0	equ	0xFEE
  2667                           wreg	equ	0xFE8
  2668                           postdec1	equ	0xFE5
  2669                           fsr1l	equ	0xFE1
  2670                           indf2	equ	0xFDF
  2671                           fsr2h	equ	0xFDA
  2672                           fsr2l	equ	0xFD9
  2673                           status	equ	0xFD8
  2674                           
  2675 ;; *************** function _get_adc_out *****************
  2676 ;; Defined at:
  2677 ;;		line 196 in file "src/L6474.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  unit            1    wreg     unsigned char 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  unit            1   21[COMRAM] unsigned char 
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  1    wreg      void 
  2684 ;; Registers used:
  2685 ;;		wreg, status,2, status,0, cstack
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMRAM   BANK0   BANK1
  2691 ;;      Params:         0       0       0
  2692 ;;      Locals:         1       0       0
  2693 ;;      Temps:          0       0       0
  2694 ;;      Totals:         1       0       0
  2695 ;;Total ram usage:        1 bytes
  2696 ;; Hardware stack levels used:    1
  2697 ;; Hardware stack levels required when called:    4
  2698 ;; This function calls:
  2699 ;;		_read_spi_chain
  2700 ;;		_write_spi_chain
  2701 ;; This function is called by:
  2702 ;;		_main
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text18
  2707  000B2A                     __ptext18:
  2708                           	opt stack 0
  2709  000B2A                     _get_adc_out:
  2710                           	opt stack 26
  2711                           
  2712                           ;incstack = 0
  2713                           ;get_adc_out@unit stored from wreg
  2714  000B2A  6E6B               	movwf	get_adc_out@unit,c
  2715                           
  2716                           ;L6474.c: 197: write_spi_chain((0x20) | (0x12), unit);
  2717  000B2C  C06B  F068         	movff	get_adc_out@unit,write_spi_chain@unit
  2718  000B30  0E32               	movlw	50
  2719  000B32  EC64  F003         	call	_write_spi_chain
  2720                           
  2721                           ;L6474.c: 198: read_spi_chain(1, unit);
  2722  000B36  C06B  F069         	movff	get_adc_out@unit,read_spi_chain@unit
  2723  000B3A  0E01               	movlw	1
  2724  000B3C  ECD3  F003         	call	_read_spi_chain
  2725  000B40  0012               	return		;funcret
  2726  000B42                     __end_of_get_adc_out:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           prodh	equ	0xFF4
  2733                           prodl	equ	0xFF3
  2734                           intcon	equ	0xFF2
  2735                           postinc0	equ	0xFEE
  2736                           wreg	equ	0xFE8
  2737                           postdec1	equ	0xFE5
  2738                           fsr1l	equ	0xFE1
  2739                           indf2	equ	0xFDF
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _get_abs_pos *****************
  2745 ;; Defined at:
  2746 ;;		line 113 in file "src/L6474.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  unit            1    wreg     unsigned char 
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;  unit            1   21[COMRAM] unsigned char 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1
  2760 ;;      Params:         0       0       0
  2761 ;;      Locals:         1       0       0
  2762 ;;      Temps:          0       0       0
  2763 ;;      Totals:         1       0       0
  2764 ;;Total ram usage:        1 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    4
  2767 ;; This function calls:
  2768 ;;		_read_spi_chain
  2769 ;;		_write_spi_chain
  2770 ;; This function is called by:
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text19
  2776  000B42                     __ptext19:
  2777                           	opt stack 0
  2778  000B42                     _get_abs_pos:
  2779                           	opt stack 26
  2780                           
  2781                           ;incstack = 0
  2782                           ;get_abs_pos@unit stored from wreg
  2783  000B42  6E6B               	movwf	get_abs_pos@unit,c
  2784                           
  2785                           ;L6474.c: 115: write_spi_chain((0x20) | (0x01), unit);
  2786  000B44  C06B  F068         	movff	get_abs_pos@unit,write_spi_chain@unit
  2787  000B48  0E21               	movlw	33
  2788  000B4A  EC64  F003         	call	_write_spi_chain
  2789                           
  2790                           ;L6474.c: 116: read_spi_chain(3, unit);
  2791  000B4E  C06B  F069         	movff	get_abs_pos@unit,read_spi_chain@unit
  2792  000B52  0E03               	movlw	3
  2793  000B54  ECD3  F003         	call	_read_spi_chain
  2794  000B58  0012               	return		;funcret
  2795  000B5A                     __end_of_get_abs_pos:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           prodh	equ	0xFF4
  2802                           prodl	equ	0xFF3
  2803                           intcon	equ	0xFF2
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postdec1	equ	0xFE5
  2807                           fsr1l	equ	0xFE1
  2808                           indf2	equ	0xFDF
  2809                           fsr2h	equ	0xFDA
  2810                           fsr2l	equ	0xFD9
  2811                           status	equ	0xFD8
  2812                           
  2813 ;; *************** function _read_spi_chain *****************
  2814 ;; Defined at:
  2815 ;;		line 55 in file "src/L6474.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  num_response    1    wreg     unsigned char 
  2818 ;;  unit            1   19[COMRAM] unsigned char 
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  num_response    1   20[COMRAM] unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, status,2, status,0, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1
  2830 ;;      Params:         1       0       0
  2831 ;;      Locals:         1       0       0
  2832 ;;      Temps:          0       0       0
  2833 ;;      Totals:         2       0       0
  2834 ;;Total ram usage:        2 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    3
  2837 ;; This function calls:
  2838 ;;		_read_spi_chain_single
  2839 ;; This function is called by:
  2840 ;;		_get_abs_pos
  2841 ;;		_get_el_pos
  2842 ;;		_get_mark
  2843 ;;		_get_tval
  2844 ;;		_get_t_fast
  2845 ;;		_get_ton_min
  2846 ;;		_get_toff_min
  2847 ;;		_get_adc_out
  2848 ;;		_get_ocd_th
  2849 ;;		_get_step_mode
  2850 ;;		_get_alarm_en
  2851 ;;		_get_config
  2852 ;;		_get_status
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text20
  2857  0007A6                     __ptext20:
  2858                           	opt stack 0
  2859  0007A6                     _read_spi_chain:
  2860                           	opt stack 26
  2861                           
  2862                           ;incstack = 0
  2863                           ;read_spi_chain@num_response stored from wreg
  2864  0007A6  6E6A               	movwf	read_spi_chain@num_response,c
  2865                           
  2866                           ;L6474.c: 57: switch (num_response) {
  2867  0007A8  D01B               	goto	l1957
  2868  0007AA                     l1949:
  2869                           
  2870                           ;L6474.c: 59: param1 = read_spi_chain_single(unit);
  2871  0007AA  5069               	movf	read_spi_chain@unit,w,c
  2872  0007AC  EC1D  F003         	call	_read_spi_chain_single
  2873  0007B0  6E2A               	movwf	_param1,c
  2874                           
  2875                           ;L6474.c: 60: break;
  2876  0007B2  0012               	return	
  2877  0007B4                     l1951:
  2878                           
  2879                           ;L6474.c: 62: param1 = read_spi_chain_single(unit);
  2880  0007B4  5069               	movf	read_spi_chain@unit,w,c
  2881  0007B6  EC1D  F003         	call	_read_spi_chain_single
  2882  0007BA  6E2A               	movwf	_param1,c
  2883                           
  2884                           ;L6474.c: 63: param2 = read_spi_chain_single(unit);
  2885  0007BC  5069               	movf	read_spi_chain@unit,w,c
  2886  0007BE  EC1D  F003         	call	_read_spi_chain_single
  2887  0007C2  6E2B               	movwf	_param2,c
  2888                           
  2889                           ;L6474.c: 64: break;
  2890  0007C4  0012               	return	
  2891  0007C6                     l1953:
  2892                           
  2893                           ;L6474.c: 66: param1 = read_spi_chain_single(unit);
  2894  0007C6  5069               	movf	read_spi_chain@unit,w,c
  2895  0007C8  EC1D  F003         	call	_read_spi_chain_single
  2896  0007CC  6E2A               	movwf	_param1,c
  2897                           
  2898                           ;L6474.c: 67: param2 = read_spi_chain_single(unit);
  2899  0007CE  5069               	movf	read_spi_chain@unit,w,c
  2900  0007D0  EC1D  F003         	call	_read_spi_chain_single
  2901  0007D4  6E2B               	movwf	_param2,c
  2902                           
  2903                           ;L6474.c: 68: param3 = read_spi_chain_single(unit);
  2904  0007D6  5069               	movf	read_spi_chain@unit,w,c
  2905  0007D8  EC1D  F003         	call	_read_spi_chain_single
  2906  0007DC  6E2C               	movwf	_param3,c
  2907                           
  2908                           ;L6474.c: 70: }
  2909                           
  2910                           ;L6474.c: 69: break;
  2911  0007DE  0012               	return	
  2912  0007E0                     l1957:
  2913  0007E0  506A               	movf	read_spi_chain@num_response,w,c
  2914                           
  2915                           ; Switch size 1, requested type "space"
  2916                           ; Number of cases is 3, Range of values is 1 to 3
  2917                           ; switch strategies available:
  2918                           ; Name         Instructions Cycles
  2919                           ; simple_byte           10     6 (average)
  2920                           ;	Chosen strategy is simple_byte
  2921  0007E2  0A01               	xorlw	1	; case 1
  2922  0007E4  B4D8               	btfsc	status,2,c
  2923  0007E6  D7E1               	goto	l1949
  2924  0007E8  0A03               	xorlw	3	; case 2
  2925  0007EA  B4D8               	btfsc	status,2,c
  2926  0007EC  D7E3               	goto	l1951
  2927  0007EE  0A01               	xorlw	1	; case 3
  2928  0007F0  A4D8               	btfss	status,2,c
  2929  0007F2  0012               	return	
  2930  0007F4  D7E8               	goto	l1953
  2931  0007F6                     __end_of_read_spi_chain:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           tblptrh	equ	0xFF7
  2935                           tblptrl	equ	0xFF6
  2936                           tablat	equ	0xFF5
  2937                           prodh	equ	0xFF4
  2938                           prodl	equ	0xFF3
  2939                           intcon	equ	0xFF2
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           fsr1l	equ	0xFE1
  2944                           indf2	equ	0xFDF
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function _read_spi_chain_single *****************
  2950 ;; Defined at:
  2951 ;;		line 22 in file "src/L6474.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  unit            1    wreg     unsigned char 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  unit            1   18[COMRAM] unsigned char 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      unsigned char 
  2958 ;; Registers used:
  2959 ;;		wreg, status,2, status,0, cstack
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMRAM   BANK0   BANK1
  2965 ;;      Params:         0       0       0
  2966 ;;      Locals:         1       0       0
  2967 ;;      Temps:          0       0       0
  2968 ;;      Totals:         1       0       0
  2969 ;;Total ram usage:        1 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    2
  2972 ;; This function calls:
  2973 ;;		_WriteSPI
  2974 ;;		_delay_us
  2975 ;; This function is called by:
  2976 ;;		_read_spi_chain
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text21
  2981  00063A                     __ptext21:
  2982                           	opt stack 0
  2983  00063A                     _read_spi_chain_single:
  2984                           	opt stack 26
  2985                           
  2986                           ;incstack = 0
  2987                           ;read_spi_chain_single@unit stored from wreg
  2988  00063A  6E68               	movwf	read_spi_chain_single@unit,c
  2989                           
  2990                           ;L6474.c: 27: PORTCbits.RC2 = 0;
  2991  00063C  9482               	bcf	3970,2,c	;volatile
  2992                           
  2993                           ;L6474.c: 28: delay_us(10);
  2994  00063E  0E00               	movlw	0
  2995  000640  6E65               	movwf	delay_us@usec+1,c
  2996  000642  0E0A               	movlw	10
  2997  000644  6E64               	movwf	delay_us@usec,c
  2998  000646  EC18  F004         	call	_delay_us	;wreg free
  2999  00064A                     l1875:
  3000  00064A  0E00               	movlw	0
  3001  00064C  ECF4  F004         	call	_WriteSPI
  3002  000650  0900               	iorlw	0
  3003  000652  A4D8               	btfss	status,2,c
  3004  000654  D7FA               	goto	l1875
  3005                           
  3006                           ;L6474.c: 32: spi_rx[0] = SSPBUF;
  3007  000656  CFC9 F016          	movff	4041,_spi_rx	;volatile
  3008  00065A                     l1877:
  3009  00065A  0E00               	movlw	0
  3010  00065C  ECF4  F004         	call	_WriteSPI
  3011  000660  0900               	iorlw	0
  3012  000662  A4D8               	btfss	status,2,c
  3013  000664  D7FA               	goto	l1877
  3014                           
  3015                           ;L6474.c: 34: spi_rx[1] = SSPBUF;
  3016  000666  CFC9 F017          	movff	4041,_spi_rx+1	;volatile
  3017  00066A                     l1879:
  3018  00066A  0E00               	movlw	0
  3019  00066C  ECF4  F004         	call	_WriteSPI
  3020  000670  0900               	iorlw	0
  3021  000672  A4D8               	btfss	status,2,c
  3022  000674  D7FA               	goto	l1879
  3023                           
  3024                           ;L6474.c: 36: spi_rx[2] = SSPBUF;
  3025  000676  CFC9 F018          	movff	4041,_spi_rx+2	;volatile
  3026  00067A                     l1881:
  3027  00067A  0E00               	movlw	0
  3028  00067C  ECF4  F004         	call	_WriteSPI
  3029  000680  0900               	iorlw	0
  3030  000682  A4D8               	btfss	status,2,c
  3031  000684  D7FA               	goto	l1881
  3032                           
  3033                           ;L6474.c: 38: spi_rx[3] = SSPBUF;
  3034  000686  CFC9 F019          	movff	4041,_spi_rx+3	;volatile
  3035                           
  3036                           ;L6474.c: 44: PORTCbits.RC2 = 1;
  3037  00068A  8482               	bsf	3970,2,c	;volatile
  3038                           
  3039                           ;L6474.c: 45: delay_us(10);
  3040  00068C  0E00               	movlw	0
  3041  00068E  6E65               	movwf	delay_us@usec+1,c
  3042  000690  0E0A               	movlw	10
  3043  000692  6E64               	movwf	delay_us@usec,c
  3044  000694  EC18  F004         	call	_delay_us	;wreg free
  3045                           
  3046                           ;L6474.c: 48: if (unit == (0)) return spi_rx[3];
  3047  000698  5068               	movf	read_spi_chain_single@unit,w,c
  3048  00069A  A4D8               	btfss	status,2,c
  3049  00069C  D002               	goto	l1891
  3050  00069E  5019               	movf	_spi_rx+3,w,c
  3051  0006A0  0012               	return	
  3052  0006A2                     l1891:
  3053                           
  3054                           ;L6474.c: 49: if (unit == (1)) return spi_rx[2];
  3055  0006A2  0468               	decf	read_spi_chain_single@unit,w,c
  3056  0006A4  A4D8               	btfss	status,2,c
  3057  0006A6  D002               	goto	l1897
  3058  0006A8  5018               	movf	_spi_rx+2,w,c
  3059  0006AA  0012               	return	
  3060  0006AC                     l1897:
  3061                           
  3062                           ;L6474.c: 50: if (unit == (2)) return spi_rx[1];
  3063  0006AC  0E02               	movlw	2
  3064  0006AE  1868               	xorwf	read_spi_chain_single@unit,w,c
  3065  0006B0  A4D8               	btfss	status,2,c
  3066  0006B2  D002               	goto	l1903
  3067  0006B4  5017               	movf	_spi_rx+1,w,c
  3068  0006B6  0012               	return	
  3069  0006B8                     l1903:
  3070                           
  3071                           ;L6474.c: 51: if (unit == (3)) return spi_rx[0];
  3072  0006B8  0E03               	movlw	3
  3073  0006BA  1868               	xorwf	read_spi_chain_single@unit,w,c
  3074  0006BC  A4D8               	btfss	status,2,c
  3075  0006BE  D002               	goto	l1909
  3076  0006C0  5016               	movf	_spi_rx,w,c
  3077  0006C2  0012               	return	
  3078  0006C4                     l1909:
  3079                           
  3080                           ;L6474.c: 52: return 0;
  3081  0006C4  0E00               	movlw	0
  3082  0006C6  0012               	return	
  3083  0006C8                     __end_of_read_spi_chain_single:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           prodh	equ	0xFF4
  3090                           prodl	equ	0xFF3
  3091                           intcon	equ	0xFF2
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           postdec1	equ	0xFE5
  3095                           fsr1l	equ	0xFE1
  3096                           indf2	equ	0xFDF
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _copy_from_eeprom *****************
  3102 ;; Defined at:
  3103 ;;		line 286 in file "src/L6474.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  unit            1    wreg     unsigned char 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  unit            1   21[COMRAM] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1
  3117 ;;      Params:         0       0       0
  3118 ;;      Locals:         1       0       0
  3119 ;;      Temps:          0       0       0
  3120 ;;      Totals:         1       0       0
  3121 ;;Total ram usage:        1 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    4
  3124 ;; This function calls:
  3125 ;;		_get_eeprom_offset
  3126 ;;		_read_eeprom_data
  3127 ;;		_set_abs_pos
  3128 ;;		_set_adc_out
  3129 ;;		_set_alarm_en
  3130 ;;		_set_config
  3131 ;;		_set_el_pos
  3132 ;;		_set_mark
  3133 ;;		_set_ocd_th
  3134 ;;		_set_step_mode
  3135 ;;		_set_t_fast
  3136 ;;		_set_toff_min
  3137 ;;		_set_ton_min
  3138 ;;		_set_tval
  3139 ;; This function is called by:
  3140 ;;		_main
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text22
  3145  000518                     __ptext22:
  3146                           	opt stack 0
  3147  000518                     _copy_from_eeprom:
  3148                           	opt stack 26
  3149                           
  3150                           ;incstack = 0
  3151                           ;copy_from_eeprom@unit stored from wreg
  3152  000518  6E6B               	movwf	copy_from_eeprom@unit,c
  3153                           
  3154                           ;L6474.c: 289: offset = get_eeprom_offset(unit);
  3155  00051A  506B               	movf	copy_from_eeprom@unit,w,c
  3156  00051C  EC4E  F004         	call	_get_eeprom_offset
  3157  000520  6E29               	movwf	_offset,c
  3158                           
  3159                           ;L6474.c: 292: param1 = read_eeprom_data(offset + (0));
  3160  000522  5029               	movf	_offset,w,c
  3161  000524  EC15  F006         	call	_read_eeprom_data
  3162  000528  6E2A               	movwf	_param1,c
  3163                           
  3164                           ;L6474.c: 293: param2 = read_eeprom_data(offset + (0) + 1);
  3165  00052A  2829               	incf	_offset,w,c
  3166  00052C  EC15  F006         	call	_read_eeprom_data
  3167  000530  6E2B               	movwf	_param2,c
  3168                           
  3169                           ;L6474.c: 294: param3 = read_eeprom_data(offset + (0) + 2);
  3170  000532  5029               	movf	_offset,w,c
  3171  000534  0F02               	addlw	2
  3172  000536  EC15  F006         	call	_read_eeprom_data
  3173  00053A  6E2C               	movwf	_param3,c
  3174                           
  3175                           ;L6474.c: 295: set_abs_pos(unit);
  3176  00053C  506B               	movf	copy_from_eeprom@unit,w,c
  3177  00053E  EC95  F004         	call	_set_abs_pos
  3178                           
  3179                           ;L6474.c: 298: param1 = read_eeprom_data(offset + ((0) + 3));
  3180  000542  5029               	movf	_offset,w,c
  3181  000544  0F03               	addlw	3
  3182  000546  EC15  F006         	call	_read_eeprom_data
  3183  00054A  6E2A               	movwf	_param1,c
  3184                           
  3185                           ;L6474.c: 299: param2 = read_eeprom_data(offset + ((0) + 3) + 1);
  3186  00054C  5029               	movf	_offset,w,c
  3187  00054E  0F04               	addlw	4
  3188  000550  EC15  F006         	call	_read_eeprom_data
  3189  000554  6E2B               	movwf	_param2,c
  3190                           
  3191                           ;L6474.c: 300: set_el_pos(unit);
  3192  000556  506B               	movf	copy_from_eeprom@unit,w,c
  3193  000558  ECD2  F004         	call	_set_el_pos
  3194                           
  3195                           ;L6474.c: 303: param1 = read_eeprom_data(offset + (((0) + 3) + 2));
  3196  00055C  5029               	movf	_offset,w,c
  3197  00055E  0F05               	addlw	5
  3198  000560  EC15  F006         	call	_read_eeprom_data
  3199  000564  6E2A               	movwf	_param1,c
  3200                           
  3201                           ;L6474.c: 304: param2 = read_eeprom_data(offset + (((0) + 3) + 2) + 1);
  3202  000566  5029               	movf	_offset,w,c
  3203  000568  0F06               	addlw	6
  3204  00056A  EC15  F006         	call	_read_eeprom_data
  3205  00056E  6E2B               	movwf	_param2,c
  3206                           
  3207                           ;L6474.c: 305: param3 = read_eeprom_data(offset + (((0) + 3) + 2) + 2);
  3208  000570  5029               	movf	_offset,w,c
  3209  000572  0F07               	addlw	7
  3210  000574  EC15  F006         	call	_read_eeprom_data
  3211  000578  6E2C               	movwf	_param3,c
  3212                           
  3213                           ;L6474.c: 306: set_mark(unit);
  3214  00057A  506B               	movf	copy_from_eeprom@unit,w,c
  3215  00057C  EC7F  F004         	call	_set_mark
  3216                           
  3217                           ;L6474.c: 309: param1 = read_eeprom_data(offset + ((((0) + 3) + 2) + 3));
  3218  000580  5029               	movf	_offset,w,c
  3219  000582  0F08               	addlw	8
  3220  000584  EC15  F006         	call	_read_eeprom_data
  3221  000588  6E2A               	movwf	_param1,c
  3222                           
  3223                           ;L6474.c: 310: set_tval(unit);
  3224  00058A  506B               	movf	copy_from_eeprom@unit,w,c
  3225  00058C  ECAD  F005         	call	_set_tval
  3226                           
  3227                           ;L6474.c: 313: param1 = read_eeprom_data(offset + (((((0) + 3) + 2) + 3) + 1));
  3228  000590  5029               	movf	_offset,w,c
  3229  000592  0F09               	addlw	9
  3230  000594  EC15  F006         	call	_read_eeprom_data
  3231  000598  6E2A               	movwf	_param1,c
  3232                           
  3233                           ;L6474.c: 314: set_t_fast(unit);
  3234  00059A  506B               	movf	copy_from_eeprom@unit,w,c
  3235  00059C  ECD1  F005         	call	_set_t_fast
  3236                           
  3237                           ;L6474.c: 317: param1 = read_eeprom_data(offset + ((((((0) + 3) + 2) + 3) + 1) + 1));
  3238  0005A0  5029               	movf	_offset,w,c
  3239  0005A2  0F0A               	addlw	10
  3240  0005A4  EC15  F006         	call	_read_eeprom_data
  3241  0005A8  6E2A               	movwf	_param1,c
  3242                           
  3243                           ;L6474.c: 318: set_ton_min(unit);
  3244  0005AA  506B               	movf	copy_from_eeprom@unit,w,c
  3245  0005AC  ECB9  F005         	call	_set_ton_min
  3246                           
  3247                           ;L6474.c: 321: param1 = read_eeprom_data(offset + (((((((0) + 3) + 2) + 3) + 1) + 1) + 1
      +                          ));
  3248  0005B0  5029               	movf	_offset,w,c
  3249  0005B2  0F0B               	addlw	11
  3250  0005B4  EC15  F006         	call	_read_eeprom_data
  3251  0005B8  6E2A               	movwf	_param1,c
  3252                           
  3253                           ;L6474.c: 322: set_toff_min(unit);
  3254  0005BA  506B               	movf	copy_from_eeprom@unit,w,c
  3255  0005BC  ECC5  F005         	call	_set_toff_min
  3256                           
  3257                           ;L6474.c: 325: param1 = read_eeprom_data(offset + ((((((((0) + 3) + 2) + 3) + 1) + 1) + 
      +                          1) + 1));
  3258  0005C0  5029               	movf	_offset,w,c
  3259  0005C2  0F0C               	addlw	12
  3260  0005C4  EC15  F006         	call	_read_eeprom_data
  3261  0005C8  6E2A               	movwf	_param1,c
  3262                           
  3263                           ;L6474.c: 326: set_adc_out(unit);
  3264  0005CA  506B               	movf	copy_from_eeprom@unit,w,c
  3265  0005CC  EC01  F006         	call	_set_adc_out
  3266                           
  3267                           ;L6474.c: 329: param1 = read_eeprom_data(offset + (((((((((0) + 3) + 2) + 3) + 1) + 1) +
      +                           1) + 1) + 1));
  3268  0005D0  5029               	movf	_offset,w,c
  3269  0005D2  0F0D               	addlw	13
  3270  0005D4  EC15  F006         	call	_read_eeprom_data
  3271  0005D8  6E2A               	movwf	_param1,c
  3272                           
  3273                           ;L6474.c: 330: set_ocd_th(unit);
  3274  0005DA  506B               	movf	copy_from_eeprom@unit,w,c
  3275  0005DC  ECE9  F005         	call	_set_ocd_th
  3276                           
  3277                           ;L6474.c: 333: param1 = read_eeprom_data(offset + ((((((((((0) + 3) + 2) + 3) + 1) + 1) 
      +                          + 1) + 1) + 1) + 1));
  3278  0005E0  5029               	movf	_offset,w,c
  3279  0005E2  0F0E               	addlw	14
  3280  0005E4  EC15  F006         	call	_read_eeprom_data
  3281  0005E8  6E2A               	movwf	_param1,c
  3282                           
  3283                           ;L6474.c: 334: set_step_mode(unit);
  3284  0005EA  506B               	movf	copy_from_eeprom@unit,w,c
  3285  0005EC  ECDD  F005         	call	_set_step_mode
  3286                           
  3287                           ;L6474.c: 337: param1 = read_eeprom_data(offset + (((((((((((0) + 3) + 2) + 3) + 1) + 1)
      +                           + 1) + 1) + 1) + 1) + 1));
  3288  0005F0  5029               	movf	_offset,w,c
  3289  0005F2  0F0F               	addlw	15
  3290  0005F4  EC15  F006         	call	_read_eeprom_data
  3291  0005F8  6E2A               	movwf	_param1,c
  3292                           
  3293                           ;L6474.c: 338: set_alarm_en(unit);
  3294  0005FA  506B               	movf	copy_from_eeprom@unit,w,c
  3295  0005FC  ECF5  F005         	call	_set_alarm_en
  3296                           
  3297                           ;L6474.c: 341: param1 = 0;
  3298  000600  0E00               	movlw	0
  3299  000602  6E2A               	movwf	_param1,c
  3300                           
  3301                           ;L6474.c: 342: param2 = 0;
  3302  000604  0E00               	movlw	0
  3303  000606  6E2B               	movwf	_param2,c
  3304                           
  3305                           ;L6474.c: 343: param3 = 0;
  3306  000608  0E00               	movlw	0
  3307  00060A  6E2C               	movwf	_param3,c
  3308                           
  3309                           ;L6474.c: 344: set_abs_pos(unit);
  3310  00060C  506B               	movf	copy_from_eeprom@unit,w,c
  3311  00060E  EC95  F004         	call	_set_abs_pos
  3312                           
  3313                           ;L6474.c: 345: set_el_pos(unit);
  3314  000612  506B               	movf	copy_from_eeprom@unit,w,c
  3315  000614  ECD2  F004         	call	_set_el_pos
  3316                           
  3317                           ;L6474.c: 346: set_mark(unit);
  3318  000618  506B               	movf	copy_from_eeprom@unit,w,c
  3319  00061A  EC7F  F004         	call	_set_mark
  3320                           
  3321                           ;L6474.c: 349: param1 = read_eeprom_data(offset + ((((((((((((0) + 3) + 2) + 3) + 1) + 1
      +                          ) + 1) + 1) + 1) + 1) + 1) + 1));
  3322  00061E  5029               	movf	_offset,w,c
  3323  000620  0F10               	addlw	16
  3324  000622  EC15  F006         	call	_read_eeprom_data
  3325  000626  6E2A               	movwf	_param1,c
  3326                           
  3327                           ;L6474.c: 350: param2 = read_eeprom_data(offset + ((((((((((((0) + 3) + 2) + 3) + 1) + 1
      +                          ) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
  3328  000628  5029               	movf	_offset,w,c
  3329  00062A  0F11               	addlw	17
  3330  00062C  EC15  F006         	call	_read_eeprom_data
  3331  000630  6E2B               	movwf	_param2,c
  3332                           
  3333                           ;L6474.c: 351: set_config(unit);
  3334  000632  506B               	movf	copy_from_eeprom@unit,w,c
  3335  000634  ECE3  F004         	call	_set_config
  3336  000638  0012               	return		;funcret
  3337  00063A                     __end_of_copy_from_eeprom:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           postinc0	equ	0xFEE
  3347                           wreg	equ	0xFE8
  3348                           postdec1	equ	0xFE5
  3349                           fsr1l	equ	0xFE1
  3350                           indf2	equ	0xFDF
  3351                           fsr2h	equ	0xFDA
  3352                           fsr2l	equ	0xFD9
  3353                           status	equ	0xFD8
  3354                           
  3355 ;; *************** function _set_tval *****************
  3356 ;; Defined at:
  3357 ;;		line 147 in file "src/L6474.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  unit            1    wreg     unsigned char 
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  unit            1   20[COMRAM] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, status,2, status,0, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1
  3371 ;;      Params:         0       0       0
  3372 ;;      Locals:         1       0       0
  3373 ;;      Temps:          0       0       0
  3374 ;;      Totals:         1       0       0
  3375 ;;Total ram usage:        1 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    3
  3378 ;; This function calls:
  3379 ;;		_write_spi_chain
  3380 ;; This function is called by:
  3381 ;;		_copy_from_eeprom
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text23
  3386  000B5A                     __ptext23:
  3387                           	opt stack 0
  3388  000B5A                     _set_tval:
  3389                           	opt stack 26
  3390                           
  3391                           ;incstack = 0
  3392                           ;set_tval@unit stored from wreg
  3393  000B5A  6E6A               	movwf	set_tval@unit,c
  3394                           
  3395                           ;L6474.c: 148: write_spi_chain((0x00) | (0x09), unit);
  3396  000B5C  C06A  F068         	movff	set_tval@unit,write_spi_chain@unit
  3397  000B60  0E09               	movlw	9
  3398  000B62  EC64  F003         	call	_write_spi_chain
  3399                           
  3400                           ;L6474.c: 149: write_spi_chain(param1, unit);
  3401  000B66  C06A  F068         	movff	set_tval@unit,write_spi_chain@unit
  3402  000B6A  502A               	movf	_param1,w,c
  3403  000B6C  EC64  F003         	call	_write_spi_chain
  3404  000B70  0012               	return		;funcret
  3405  000B72                     __end_of_set_tval:
  3406                           	opt stack 0
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           prodh	equ	0xFF4
  3412                           prodl	equ	0xFF3
  3413                           intcon	equ	0xFF2
  3414                           postinc0	equ	0xFEE
  3415                           wreg	equ	0xFE8
  3416                           postdec1	equ	0xFE5
  3417                           fsr1l	equ	0xFE1
  3418                           indf2	equ	0xFDF
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function _set_ton_min *****************
  3424 ;; Defined at:
  3425 ;;		line 169 in file "src/L6474.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  unit            1    wreg     unsigned char 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  unit            1   20[COMRAM] unsigned char 
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, status,0, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMRAM   BANK0   BANK1
  3439 ;;      Params:         0       0       0
  3440 ;;      Locals:         1       0       0
  3441 ;;      Temps:          0       0       0
  3442 ;;      Totals:         1       0       0
  3443 ;;Total ram usage:        1 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    3
  3446 ;; This function calls:
  3447 ;;		_write_spi_chain
  3448 ;; This function is called by:
  3449 ;;		_copy_from_eeprom
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           	psect	text24
  3454  000B72                     __ptext24:
  3455                           	opt stack 0
  3456  000B72                     _set_ton_min:
  3457                           	opt stack 26
  3458                           
  3459                           ;incstack = 0
  3460                           ;set_ton_min@unit stored from wreg
  3461  000B72  6E6A               	movwf	set_ton_min@unit,c
  3462                           
  3463                           ;L6474.c: 170: write_spi_chain((0x00) | (0x0F), unit);
  3464  000B74  C06A  F068         	movff	set_ton_min@unit,write_spi_chain@unit
  3465  000B78  0E0F               	movlw	15
  3466  000B7A  EC64  F003         	call	_write_spi_chain
  3467                           
  3468                           ;L6474.c: 171: write_spi_chain(param1, unit);
  3469  000B7E  C06A  F068         	movff	set_ton_min@unit,write_spi_chain@unit
  3470  000B82  502A               	movf	_param1,w,c
  3471  000B84  EC64  F003         	call	_write_spi_chain
  3472  000B88  0012               	return		;funcret
  3473  000B8A                     __end_of_set_ton_min:
  3474                           	opt stack 0
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           prodh	equ	0xFF4
  3480                           prodl	equ	0xFF3
  3481                           intcon	equ	0xFF2
  3482                           postinc0	equ	0xFEE
  3483                           wreg	equ	0xFE8
  3484                           postdec1	equ	0xFE5
  3485                           fsr1l	equ	0xFE1
  3486                           indf2	equ	0xFDF
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function _set_toff_min *****************
  3492 ;; Defined at:
  3493 ;;		line 180 in file "src/L6474.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  unit            1    wreg     unsigned char 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;  unit            1   20[COMRAM] unsigned char 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      void 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1
  3507 ;;      Params:         0       0       0
  3508 ;;      Locals:         1       0       0
  3509 ;;      Temps:          0       0       0
  3510 ;;      Totals:         1       0       0
  3511 ;;Total ram usage:        1 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    3
  3514 ;; This function calls:
  3515 ;;		_write_spi_chain
  3516 ;; This function is called by:
  3517 ;;		_copy_from_eeprom
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text25
  3522  000B8A                     __ptext25:
  3523                           	opt stack 0
  3524  000B8A                     _set_toff_min:
  3525                           	opt stack 26
  3526                           
  3527                           ;incstack = 0
  3528                           ;set_toff_min@unit stored from wreg
  3529  000B8A  6E6A               	movwf	set_toff_min@unit,c
  3530                           
  3531                           ;L6474.c: 181: write_spi_chain((0x00) | (0x10), unit);
  3532  000B8C  C06A  F068         	movff	set_toff_min@unit,write_spi_chain@unit
  3533  000B90  0E10               	movlw	16
  3534  000B92  EC64  F003         	call	_write_spi_chain
  3535                           
  3536                           ;L6474.c: 182: write_spi_chain(param1, unit);
  3537  000B96  C06A  F068         	movff	set_toff_min@unit,write_spi_chain@unit
  3538  000B9A  502A               	movf	_param1,w,c
  3539  000B9C  EC64  F003         	call	_write_spi_chain
  3540  000BA0  0012               	return		;funcret
  3541  000BA2                     __end_of_set_toff_min:
  3542                           	opt stack 0
  3543                           tblptru	equ	0xFF8
  3544                           tblptrh	equ	0xFF7
  3545                           tblptrl	equ	0xFF6
  3546                           tablat	equ	0xFF5
  3547                           prodh	equ	0xFF4
  3548                           prodl	equ	0xFF3
  3549                           intcon	equ	0xFF2
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postdec1	equ	0xFE5
  3553                           fsr1l	equ	0xFE1
  3554                           indf2	equ	0xFDF
  3555                           fsr2h	equ	0xFDA
  3556                           fsr2l	equ	0xFD9
  3557                           status	equ	0xFD8
  3558                           
  3559 ;; *************** function _set_t_fast *****************
  3560 ;; Defined at:
  3561 ;;		line 158 in file "src/L6474.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;  unit            1    wreg     unsigned char 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;  unit            1   20[COMRAM] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      void 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1
  3575 ;;      Params:         0       0       0
  3576 ;;      Locals:         1       0       0
  3577 ;;      Temps:          0       0       0
  3578 ;;      Totals:         1       0       0
  3579 ;;Total ram usage:        1 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    3
  3582 ;; This function calls:
  3583 ;;		_write_spi_chain
  3584 ;; This function is called by:
  3585 ;;		_copy_from_eeprom
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text26
  3590  000BA2                     __ptext26:
  3591                           	opt stack 0
  3592  000BA2                     _set_t_fast:
  3593                           	opt stack 26
  3594                           
  3595                           ;incstack = 0
  3596                           ;set_t_fast@unit stored from wreg
  3597  000BA2  6E6A               	movwf	set_t_fast@unit,c
  3598                           
  3599                           ;L6474.c: 159: write_spi_chain((0x00) | (0x0E), unit);
  3600  000BA4  C06A  F068         	movff	set_t_fast@unit,write_spi_chain@unit
  3601  000BA8  0E0E               	movlw	14
  3602  000BAA  EC64  F003         	call	_write_spi_chain
  3603                           
  3604                           ;L6474.c: 160: write_spi_chain(param1, unit);
  3605  000BAE  C06A  F068         	movff	set_t_fast@unit,write_spi_chain@unit
  3606  000BB2  502A               	movf	_param1,w,c
  3607  000BB4  EC64  F003         	call	_write_spi_chain
  3608  000BB8  0012               	return		;funcret
  3609  000BBA                     __end_of_set_t_fast:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           postdec1	equ	0xFE5
  3621                           fsr1l	equ	0xFE1
  3622                           indf2	equ	0xFDF
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8
  3626                           
  3627 ;; *************** function _set_step_mode *****************
  3628 ;; Defined at:
  3629 ;;		line 213 in file "src/L6474.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  unit            1    wreg     unsigned char 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;  unit            1   20[COMRAM] unsigned char 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      void 
  3636 ;; Registers used:
  3637 ;;		wreg, status,2, status,0, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1
  3643 ;;      Params:         0       0       0
  3644 ;;      Locals:         1       0       0
  3645 ;;      Temps:          0       0       0
  3646 ;;      Totals:         1       0       0
  3647 ;;Total ram usage:        1 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    3
  3650 ;; This function calls:
  3651 ;;		_write_spi_chain
  3652 ;; This function is called by:
  3653 ;;		_copy_from_eeprom
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text27
  3658  000BBA                     __ptext27:
  3659                           	opt stack 0
  3660  000BBA                     _set_step_mode:
  3661                           	opt stack 26
  3662                           
  3663                           ;incstack = 0
  3664                           ;set_step_mode@unit stored from wreg
  3665  000BBA  6E6A               	movwf	set_step_mode@unit,c
  3666                           
  3667                           ;L6474.c: 214: write_spi_chain((0x00) | (0x16), unit);
  3668  000BBC  C06A  F068         	movff	set_step_mode@unit,write_spi_chain@unit
  3669  000BC0  0E16               	movlw	22
  3670  000BC2  EC64  F003         	call	_write_spi_chain
  3671                           
  3672                           ;L6474.c: 215: write_spi_chain(param1, unit);
  3673  000BC6  C06A  F068         	movff	set_step_mode@unit,write_spi_chain@unit
  3674  000BCA  502A               	movf	_param1,w,c
  3675  000BCC  EC64  F003         	call	_write_spi_chain
  3676  000BD0  0012               	return		;funcret
  3677  000BD2                     __end_of_set_step_mode:
  3678                           	opt stack 0
  3679                           tblptru	equ	0xFF8
  3680                           tblptrh	equ	0xFF7
  3681                           tblptrl	equ	0xFF6
  3682                           tablat	equ	0xFF5
  3683                           prodh	equ	0xFF4
  3684                           prodl	equ	0xFF3
  3685                           intcon	equ	0xFF2
  3686                           postinc0	equ	0xFEE
  3687                           wreg	equ	0xFE8
  3688                           postdec1	equ	0xFE5
  3689                           fsr1l	equ	0xFE1
  3690                           indf2	equ	0xFDF
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function _set_ocd_th *****************
  3696 ;; Defined at:
  3697 ;;		line 202 in file "src/L6474.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  unit            1    wreg     unsigned char 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  unit            1   20[COMRAM] unsigned char 
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  1    wreg      void 
  3704 ;; Registers used:
  3705 ;;		wreg, status,2, status,0, cstack
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMRAM   BANK0   BANK1
  3711 ;;      Params:         0       0       0
  3712 ;;      Locals:         1       0       0
  3713 ;;      Temps:          0       0       0
  3714 ;;      Totals:         1       0       0
  3715 ;;Total ram usage:        1 bytes
  3716 ;; Hardware stack levels used:    1
  3717 ;; Hardware stack levels required when called:    3
  3718 ;; This function calls:
  3719 ;;		_write_spi_chain
  3720 ;; This function is called by:
  3721 ;;		_copy_from_eeprom
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text28
  3726  000BD2                     __ptext28:
  3727                           	opt stack 0
  3728  000BD2                     _set_ocd_th:
  3729                           	opt stack 26
  3730                           
  3731                           ;incstack = 0
  3732                           ;set_ocd_th@unit stored from wreg
  3733  000BD2  6E6A               	movwf	set_ocd_th@unit,c
  3734                           
  3735                           ;L6474.c: 203: write_spi_chain((0x00) | (0x13), unit);
  3736  000BD4  C06A  F068         	movff	set_ocd_th@unit,write_spi_chain@unit
  3737  000BD8  0E13               	movlw	19
  3738  000BDA  EC64  F003         	call	_write_spi_chain
  3739                           
  3740                           ;L6474.c: 204: write_spi_chain(param1, unit);
  3741  000BDE  C06A  F068         	movff	set_ocd_th@unit,write_spi_chain@unit
  3742  000BE2  502A               	movf	_param1,w,c
  3743  000BE4  EC64  F003         	call	_write_spi_chain
  3744  000BE8  0012               	return		;funcret
  3745  000BEA                     __end_of_set_ocd_th:
  3746                           	opt stack 0
  3747                           tblptru	equ	0xFF8
  3748                           tblptrh	equ	0xFF7
  3749                           tblptrl	equ	0xFF6
  3750                           tablat	equ	0xFF5
  3751                           prodh	equ	0xFF4
  3752                           prodl	equ	0xFF3
  3753                           intcon	equ	0xFF2
  3754                           postinc0	equ	0xFEE
  3755                           wreg	equ	0xFE8
  3756                           postdec1	equ	0xFE5
  3757                           fsr1l	equ	0xFE1
  3758                           indf2	equ	0xFDF
  3759                           fsr2h	equ	0xFDA
  3760                           fsr2l	equ	0xFD9
  3761                           status	equ	0xFD8
  3762                           
  3763 ;; *************** function _set_mark *****************
  3764 ;; Defined at:
  3765 ;;		line 134 in file "src/L6474.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  unit            1    wreg     unsigned char 
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  unit            1   20[COMRAM] unsigned char 
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      void 
  3772 ;; Registers used:
  3773 ;;		wreg, status,2, status,0, cstack
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1
  3779 ;;      Params:         0       0       0
  3780 ;;      Locals:         1       0       0
  3781 ;;      Temps:          0       0       0
  3782 ;;      Totals:         1       0       0
  3783 ;;Total ram usage:        1 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    3
  3786 ;; This function calls:
  3787 ;;		_write_spi_chain
  3788 ;; This function is called by:
  3789 ;;		_copy_from_eeprom
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text29
  3794  0008FE                     __ptext29:
  3795                           	opt stack 0
  3796  0008FE                     _set_mark:
  3797                           	opt stack 26
  3798                           
  3799                           ;incstack = 0
  3800                           ;set_mark@unit stored from wreg
  3801  0008FE  6E6A               	movwf	set_mark@unit,c
  3802                           
  3803                           ;L6474.c: 135: write_spi_chain((0x00) | (0x03), unit);
  3804  000900  C06A  F068         	movff	set_mark@unit,write_spi_chain@unit
  3805  000904  0E03               	movlw	3
  3806  000906  EC64  F003         	call	_write_spi_chain
  3807                           
  3808                           ;L6474.c: 136: write_spi_chain(param1, unit);
  3809  00090A  C06A  F068         	movff	set_mark@unit,write_spi_chain@unit
  3810  00090E  502A               	movf	_param1,w,c
  3811  000910  EC64  F003         	call	_write_spi_chain
  3812                           
  3813                           ;L6474.c: 137: write_spi_chain(param2, unit);
  3814  000914  C06A  F068         	movff	set_mark@unit,write_spi_chain@unit
  3815  000918  502B               	movf	_param2,w,c
  3816  00091A  EC64  F003         	call	_write_spi_chain
  3817                           
  3818                           ;L6474.c: 138: write_spi_chain(param3, unit);
  3819  00091E  C06A  F068         	movff	set_mark@unit,write_spi_chain@unit
  3820  000922  502C               	movf	_param3,w,c
  3821  000924  EC64  F003         	call	_write_spi_chain
  3822  000928  0012               	return		;funcret
  3823  00092A                     __end_of_set_mark:
  3824                           	opt stack 0
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           postinc0	equ	0xFEE
  3833                           wreg	equ	0xFE8
  3834                           postdec1	equ	0xFE5
  3835                           fsr1l	equ	0xFE1
  3836                           indf2	equ	0xFDF
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function _set_el_pos *****************
  3842 ;; Defined at:
  3843 ;;		line 120 in file "src/L6474.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  unit            1    wreg     unsigned char 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  unit            1   20[COMRAM] unsigned char 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      void 
  3850 ;; Registers used:
  3851 ;;		wreg, status,2, status,0, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1
  3857 ;;      Params:         0       0       0
  3858 ;;      Locals:         1       0       0
  3859 ;;      Temps:          0       0       0
  3860 ;;      Totals:         1       0       0
  3861 ;;Total ram usage:        1 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    3
  3864 ;; This function calls:
  3865 ;;		_write_spi_chain
  3866 ;; This function is called by:
  3867 ;;		_reset_position
  3868 ;;		_copy_from_eeprom
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text30
  3873  0009A4                     __ptext30:
  3874                           	opt stack 0
  3875  0009A4                     _set_el_pos:
  3876                           	opt stack 26
  3877                           
  3878                           ;incstack = 0
  3879                           ;set_el_pos@unit stored from wreg
  3880  0009A4  6E6A               	movwf	set_el_pos@unit,c
  3881                           
  3882                           ;L6474.c: 122: write_spi_chain((0x00) | (0x02), unit);
  3883  0009A6  C06A  F068         	movff	set_el_pos@unit,write_spi_chain@unit
  3884  0009AA  0E02               	movlw	2
  3885  0009AC  EC64  F003         	call	_write_spi_chain
  3886                           
  3887                           ;L6474.c: 123: write_spi_chain(param1, unit);
  3888  0009B0  C06A  F068         	movff	set_el_pos@unit,write_spi_chain@unit
  3889  0009B4  502A               	movf	_param1,w,c
  3890  0009B6  EC64  F003         	call	_write_spi_chain
  3891                           
  3892                           ;L6474.c: 124: write_spi_chain(param2, unit);
  3893  0009BA  C06A  F068         	movff	set_el_pos@unit,write_spi_chain@unit
  3894  0009BE  502B               	movf	_param2,w,c
  3895  0009C0  EC64  F003         	call	_write_spi_chain
  3896  0009C4  0012               	return		;funcret
  3897  0009C6                     __end_of_set_el_pos:
  3898                           	opt stack 0
  3899                           tblptru	equ	0xFF8
  3900                           tblptrh	equ	0xFF7
  3901                           tblptrl	equ	0xFF6
  3902                           tablat	equ	0xFF5
  3903                           prodh	equ	0xFF4
  3904                           prodl	equ	0xFF3
  3905                           intcon	equ	0xFF2
  3906                           postinc0	equ	0xFEE
  3907                           wreg	equ	0xFE8
  3908                           postdec1	equ	0xFE5
  3909                           fsr1l	equ	0xFE1
  3910                           indf2	equ	0xFDF
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _set_config *****************
  3916 ;; Defined at:
  3917 ;;		line 235 in file "src/L6474.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  unit            1    wreg     unsigned char 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  unit            1   20[COMRAM] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1
  3931 ;;      Params:         0       0       0
  3932 ;;      Locals:         1       0       0
  3933 ;;      Temps:          0       0       0
  3934 ;;      Totals:         1       0       0
  3935 ;;Total ram usage:        1 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    3
  3938 ;; This function calls:
  3939 ;;		_write_spi_chain
  3940 ;; This function is called by:
  3941 ;;		_copy_from_eeprom
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text31
  3946  0009C6                     __ptext31:
  3947                           	opt stack 0
  3948  0009C6                     _set_config:
  3949                           	opt stack 26
  3950                           
  3951                           ;incstack = 0
  3952                           ;set_config@unit stored from wreg
  3953  0009C6  6E6A               	movwf	set_config@unit,c
  3954                           
  3955                           ;L6474.c: 236: write_spi_chain((0x00) | (0x18), unit);
  3956  0009C8  C06A  F068         	movff	set_config@unit,write_spi_chain@unit
  3957  0009CC  0E18               	movlw	24
  3958  0009CE  EC64  F003         	call	_write_spi_chain
  3959                           
  3960                           ;L6474.c: 237: write_spi_chain(param1, unit);
  3961  0009D2  C06A  F068         	movff	set_config@unit,write_spi_chain@unit
  3962  0009D6  502A               	movf	_param1,w,c
  3963  0009D8  EC64  F003         	call	_write_spi_chain
  3964                           
  3965                           ;L6474.c: 238: write_spi_chain(param2, unit);
  3966  0009DC  C06A  F068         	movff	set_config@unit,write_spi_chain@unit
  3967  0009E0  502B               	movf	_param2,w,c
  3968  0009E2  EC64  F003         	call	_write_spi_chain
  3969  0009E6  0012               	return		;funcret
  3970  0009E8                     __end_of_set_config:
  3971                           	opt stack 0
  3972                           tblptru	equ	0xFF8
  3973                           tblptrh	equ	0xFF7
  3974                           tblptrl	equ	0xFF6
  3975                           tablat	equ	0xFF5
  3976                           prodh	equ	0xFF4
  3977                           prodl	equ	0xFF3
  3978                           intcon	equ	0xFF2
  3979                           postinc0	equ	0xFEE
  3980                           wreg	equ	0xFE8
  3981                           postdec1	equ	0xFE5
  3982                           fsr1l	equ	0xFE1
  3983                           indf2	equ	0xFDF
  3984                           fsr2h	equ	0xFDA
  3985                           fsr2l	equ	0xFD9
  3986                           status	equ	0xFD8
  3987                           
  3988 ;; *************** function _set_alarm_en *****************
  3989 ;; Defined at:
  3990 ;;		line 224 in file "src/L6474.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  unit            1    wreg     unsigned char 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  unit            1   20[COMRAM] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2, status,0, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1
  4004 ;;      Params:         0       0       0
  4005 ;;      Locals:         1       0       0
  4006 ;;      Temps:          0       0       0
  4007 ;;      Totals:         1       0       0
  4008 ;;Total ram usage:        1 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    3
  4011 ;; This function calls:
  4012 ;;		_write_spi_chain
  4013 ;; This function is called by:
  4014 ;;		_copy_from_eeprom
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text32
  4019  000BEA                     __ptext32:
  4020                           	opt stack 0
  4021  000BEA                     _set_alarm_en:
  4022                           	opt stack 26
  4023                           
  4024                           ;incstack = 0
  4025                           ;set_alarm_en@unit stored from wreg
  4026  000BEA  6E6A               	movwf	set_alarm_en@unit,c
  4027                           
  4028                           ;L6474.c: 225: write_spi_chain((0x00) | (0x17), unit);
  4029  000BEC  C06A  F068         	movff	set_alarm_en@unit,write_spi_chain@unit
  4030  000BF0  0E17               	movlw	23
  4031  000BF2  EC64  F003         	call	_write_spi_chain
  4032                           
  4033                           ;L6474.c: 226: write_spi_chain(param1, unit);
  4034  000BF6  C06A  F068         	movff	set_alarm_en@unit,write_spi_chain@unit
  4035  000BFA  502A               	movf	_param1,w,c
  4036  000BFC  EC64  F003         	call	_write_spi_chain
  4037  000C00  0012               	return		;funcret
  4038  000C02                     __end_of_set_alarm_en:
  4039                           	opt stack 0
  4040                           tblptru	equ	0xFF8
  4041                           tblptrh	equ	0xFF7
  4042                           tblptrl	equ	0xFF6
  4043                           tablat	equ	0xFF5
  4044                           prodh	equ	0xFF4
  4045                           prodl	equ	0xFF3
  4046                           intcon	equ	0xFF2
  4047                           postinc0	equ	0xFEE
  4048                           wreg	equ	0xFE8
  4049                           postdec1	equ	0xFE5
  4050                           fsr1l	equ	0xFE1
  4051                           indf2	equ	0xFDF
  4052                           fsr2h	equ	0xFDA
  4053                           fsr2l	equ	0xFD9
  4054                           status	equ	0xFD8
  4055                           
  4056 ;; *************** function _set_adc_out *****************
  4057 ;; Defined at:
  4058 ;;		line 191 in file "src/L6474.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  unit            1    wreg     unsigned char 
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;  unit            1   20[COMRAM] unsigned char 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  1    wreg      void 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0, cstack
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1
  4072 ;;      Params:         0       0       0
  4073 ;;      Locals:         1       0       0
  4074 ;;      Temps:          0       0       0
  4075 ;;      Totals:         1       0       0
  4076 ;;Total ram usage:        1 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    3
  4079 ;; This function calls:
  4080 ;;		_write_spi_chain
  4081 ;; This function is called by:
  4082 ;;		_copy_from_eeprom
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text33
  4087  000C02                     __ptext33:
  4088                           	opt stack 0
  4089  000C02                     _set_adc_out:
  4090                           	opt stack 26
  4091                           
  4092                           ;incstack = 0
  4093                           ;set_adc_out@unit stored from wreg
  4094  000C02  6E6A               	movwf	set_adc_out@unit,c
  4095                           
  4096                           ;L6474.c: 192: write_spi_chain((0x00) | (0x12), unit);
  4097  000C04  C06A  F068         	movff	set_adc_out@unit,write_spi_chain@unit
  4098  000C08  0E12               	movlw	18
  4099  000C0A  EC64  F003         	call	_write_spi_chain
  4100                           
  4101                           ;L6474.c: 193: write_spi_chain(param1, unit);
  4102  000C0E  C06A  F068         	movff	set_adc_out@unit,write_spi_chain@unit
  4103  000C12  502A               	movf	_param1,w,c
  4104  000C14  EC64  F003         	call	_write_spi_chain
  4105  000C18  0012               	return		;funcret
  4106  000C1A                     __end_of_set_adc_out:
  4107                           	opt stack 0
  4108                           tblptru	equ	0xFF8
  4109                           tblptrh	equ	0xFF7
  4110                           tblptrl	equ	0xFF6
  4111                           tablat	equ	0xFF5
  4112                           prodh	equ	0xFF4
  4113                           prodl	equ	0xFF3
  4114                           intcon	equ	0xFF2
  4115                           postinc0	equ	0xFEE
  4116                           wreg	equ	0xFE8
  4117                           postdec1	equ	0xFE5
  4118                           fsr1l	equ	0xFE1
  4119                           indf2	equ	0xFDF
  4120                           fsr2h	equ	0xFDA
  4121                           fsr2l	equ	0xFD9
  4122                           status	equ	0xFD8
  4123                           
  4124 ;; *************** function _set_abs_pos *****************
  4125 ;; Defined at:
  4126 ;;		line 105 in file "src/L6474.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;  unit            1    wreg     unsigned char 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;  unit            1   20[COMRAM] unsigned char 
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      void 
  4133 ;; Registers used:
  4134 ;;		wreg, status,2, status,0, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMRAM   BANK0   BANK1
  4140 ;;      Params:         0       0       0
  4141 ;;      Locals:         1       0       0
  4142 ;;      Temps:          0       0       0
  4143 ;;      Totals:         1       0       0
  4144 ;;Total ram usage:        1 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    3
  4147 ;; This function calls:
  4148 ;;		_write_spi_chain
  4149 ;; This function is called by:
  4150 ;;		_reset_position
  4151 ;;		_copy_from_eeprom
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text34
  4156  00092A                     __ptext34:
  4157                           	opt stack 0
  4158  00092A                     _set_abs_pos:
  4159                           	opt stack 26
  4160                           
  4161                           ;incstack = 0
  4162                           ;set_abs_pos@unit stored from wreg
  4163  00092A  6E6A               	movwf	set_abs_pos@unit,c
  4164                           
  4165                           ;L6474.c: 107: write_spi_chain((0x00) | (0x01), unit);
  4166  00092C  C06A  F068         	movff	set_abs_pos@unit,write_spi_chain@unit
  4167  000930  0E01               	movlw	1
  4168  000932  EC64  F003         	call	_write_spi_chain
  4169                           
  4170                           ;L6474.c: 108: write_spi_chain(param1, unit);
  4171  000936  C06A  F068         	movff	set_abs_pos@unit,write_spi_chain@unit
  4172  00093A  502A               	movf	_param1,w,c
  4173  00093C  EC64  F003         	call	_write_spi_chain
  4174                           
  4175                           ;L6474.c: 109: write_spi_chain(param2, unit);
  4176  000940  C06A  F068         	movff	set_abs_pos@unit,write_spi_chain@unit
  4177  000944  502B               	movf	_param2,w,c
  4178  000946  EC64  F003         	call	_write_spi_chain
  4179                           
  4180                           ;L6474.c: 110: write_spi_chain(param3, unit);
  4181  00094A  C06A  F068         	movff	set_abs_pos@unit,write_spi_chain@unit
  4182  00094E  502C               	movf	_param3,w,c
  4183  000950  EC64  F003         	call	_write_spi_chain
  4184  000954  0012               	return		;funcret
  4185  000956                     __end_of_set_abs_pos:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           intcon	equ	0xFF2
  4194                           postinc0	equ	0xFEE
  4195                           wreg	equ	0xFE8
  4196                           postdec1	equ	0xFE5
  4197                           fsr1l	equ	0xFE1
  4198                           indf2	equ	0xFDF
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203 ;; *************** function _write_spi_chain *****************
  4204 ;; Defined at:
  4205 ;;		line 73 in file "src/L6474.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  value           1    wreg     unsigned char 
  4208 ;;  unit            1   18[COMRAM] unsigned char 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  value           1   19[COMRAM] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      void 
  4213 ;; Registers used:
  4214 ;;		wreg, status,2, status,0, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1
  4220 ;;      Params:         1       0       0
  4221 ;;      Locals:         1       0       0
  4222 ;;      Temps:          0       0       0
  4223 ;;      Totals:         2       0       0
  4224 ;;Total ram usage:        2 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    2
  4227 ;; This function calls:
  4228 ;;		_WriteSPI
  4229 ;;		_delay_us
  4230 ;; This function is called by:
  4231 ;;		_set_abs_pos
  4232 ;;		_get_abs_pos
  4233 ;;		_set_el_pos
  4234 ;;		_get_el_pos
  4235 ;;		_set_mark
  4236 ;;		_get_mark
  4237 ;;		_set_tval
  4238 ;;		_get_tval
  4239 ;;		_set_t_fast
  4240 ;;		_get_t_fast
  4241 ;;		_set_ton_min
  4242 ;;		_get_ton_min
  4243 ;;		_set_toff_min
  4244 ;;		_get_toff_min
  4245 ;;		_set_adc_out
  4246 ;;		_get_adc_out
  4247 ;;		_set_ocd_th
  4248 ;;		_get_ocd_th
  4249 ;;		_set_step_mode
  4250 ;;		_get_step_mode
  4251 ;;		_set_alarm_en
  4252 ;;		_get_alarm_en
  4253 ;;		_set_config
  4254 ;;		_get_config
  4255 ;;		_motor_enable
  4256 ;;		_motor_disable
  4257 ;;		_get_status
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text35
  4262  0006C8                     __ptext35:
  4263                           	opt stack 0
  4264  0006C8                     _write_spi_chain:
  4265                           	opt stack 26
  4266                           
  4267                           ;incstack = 0
  4268                           ;write_spi_chain@value stored from wreg
  4269  0006C8  6E69               	movwf	write_spi_chain@value,c
  4270                           
  4271                           ;L6474.c: 76: PORTCbits.RC2 = 0;
  4272  0006CA  9482               	bcf	3970,2,c	;volatile
  4273                           
  4274                           ;L6474.c: 79: delay_us(10);
  4275  0006CC  0E00               	movlw	0
  4276  0006CE  6E65               	movwf	delay_us@usec+1,c
  4277  0006D0  0E0A               	movlw	10
  4278  0006D2  6E64               	movwf	delay_us@usec,c
  4279  0006D4  EC18  F004         	call	_delay_us	;wreg free
  4280                           
  4281                           ;L6474.c: 82: spi_tx[0] = spi_tx[1] = spi_tx[2] = spi_tx[3] = (0x00);
  4282  0006D8  0E00               	movlw	0
  4283  0006DA  6E1D               	movwf	_spi_tx+3,c
  4284  0006DC  C01D  F01C         	movff	_spi_tx+3,_spi_tx+2
  4285  0006E0  C01C  F01B         	movff	_spi_tx+2,_spi_tx+1
  4286  0006E4  C01B  F01A         	movff	_spi_tx+1,_spi_tx
  4287                           
  4288                           ;L6474.c: 83: if (unit == (0)) spi_tx[3] = value;
  4289  0006E8  5068               	movf	write_spi_chain@unit,w,c
  4290  0006EA  B4D8               	btfsc	status,2,c
  4291  0006EC  C069  F01D         	movff	write_spi_chain@value,_spi_tx+3
  4292                           
  4293                           ;L6474.c: 84: if (unit == (1)) spi_tx[2] = value;
  4294  0006F0  0468               	decf	write_spi_chain@unit,w,c
  4295  0006F2  B4D8               	btfsc	status,2,c
  4296  0006F4  C069  F01C         	movff	write_spi_chain@value,_spi_tx+2
  4297                           
  4298                           ;L6474.c: 85: if (unit == (2)) spi_tx[1] = value;
  4299  0006F8  0E02               	movlw	2
  4300  0006FA  1868               	xorwf	write_spi_chain@unit,w,c
  4301  0006FC  B4D8               	btfsc	status,2,c
  4302  0006FE  C069  F01B         	movff	write_spi_chain@value,_spi_tx+1
  4303                           
  4304                           ;L6474.c: 86: if (unit == (3)) spi_tx[0] = value;
  4305  000702  0E03               	movlw	3
  4306  000704  1868               	xorwf	write_spi_chain@unit,w,c
  4307  000706  B4D8               	btfsc	status,2,c
  4308  000708  C069  F01A         	movff	write_spi_chain@value,_spi_tx
  4309  00070C                     l1935:
  4310  00070C  501A               	movf	_spi_tx,w,c
  4311  00070E  ECF4  F004         	call	_WriteSPI
  4312  000712  0900               	iorlw	0
  4313  000714  A4D8               	btfss	status,2,c
  4314  000716  D7FA               	goto	l1935
  4315  000718                     l1937:
  4316  000718  501B               	movf	_spi_tx+1,w,c
  4317  00071A  ECF4  F004         	call	_WriteSPI
  4318  00071E  0900               	iorlw	0
  4319  000720  A4D8               	btfss	status,2,c
  4320  000722  D7FA               	goto	l1937
  4321  000724                     l1939:
  4322  000724  501C               	movf	_spi_tx+2,w,c
  4323  000726  ECF4  F004         	call	_WriteSPI
  4324  00072A  0900               	iorlw	0
  4325  00072C  A4D8               	btfss	status,2,c
  4326  00072E  D7FA               	goto	l1939
  4327  000730                     l1941:
  4328  000730  501D               	movf	_spi_tx+3,w,c
  4329  000732  ECF4  F004         	call	_WriteSPI
  4330  000736  0900               	iorlw	0
  4331  000738  A4D8               	btfss	status,2,c
  4332  00073A  D7FA               	goto	l1941
  4333                           
  4334                           ;L6474.c: 97: PORTCbits.RC2 = 1;
  4335  00073C  8482               	bsf	3970,2,c	;volatile
  4336                           
  4337                           ;L6474.c: 100: delay_us(10);
  4338  00073E  0E00               	movlw	0
  4339  000740  6E65               	movwf	delay_us@usec+1,c
  4340  000742  0E0A               	movlw	10
  4341  000744  6E64               	movwf	delay_us@usec,c
  4342  000746  EC18  F004         	call	_delay_us	;wreg free
  4343  00074A  0012               	return	
  4344  00074C                     __end_of_write_spi_chain:
  4345                           	opt stack 0
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           prodh	equ	0xFF4
  4351                           prodl	equ	0xFF3
  4352                           intcon	equ	0xFF2
  4353                           postinc0	equ	0xFEE
  4354                           wreg	equ	0xFE8
  4355                           postdec1	equ	0xFE5
  4356                           fsr1l	equ	0xFE1
  4357                           indf2	equ	0xFDF
  4358                           fsr2h	equ	0xFDA
  4359                           fsr2l	equ	0xFD9
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function _delay_us *****************
  4363 ;; Defined at:
  4364 ;;		line 74 in file "src/interrupt.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;  usec            2   14[COMRAM] int 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  n               2   16[COMRAM] int 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		wreg, status,2, status,0
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1
  4378 ;;      Params:         2       0       0
  4379 ;;      Locals:         2       0       0
  4380 ;;      Temps:          0       0       0
  4381 ;;      Totals:         4       0       0
  4382 ;;Total ram usage:        4 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    1
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_read_spi_chain_single
  4389 ;;		_write_spi_chain
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           	psect	text36
  4394  000830                     __ptext36:
  4395                           	opt stack 0
  4396  000830                     _delay_us:
  4397                           	opt stack 26
  4398                           
  4399                           ;interrupt.c: 75: int n;
  4400                           ;interrupt.c: 76: while (usec > 0) {
  4401                           
  4402                           ;incstack = 0
  4403  000830  D012               	goto	l1869
  4404  000832                     l1857:
  4405                           
  4406                           ;interrupt.c: 77: for (n = 0; n < 48; n++);
  4407  000832  0E00               	movlw	0
  4408  000834  6E67               	movwf	delay_us@n+1,c
  4409  000836  0E00               	movlw	0
  4410  000838  6E66               	movwf	delay_us@n,c
  4411  00083A                     l1859:
  4412  00083A  BE67               	btfsc	delay_us@n+1,7,c
  4413  00083C  D006               	goto	l1863
  4414  00083E  5067               	movf	delay_us@n+1,w,c
  4415  000840  E107               	bnz	l1867
  4416  000842  0E30               	movlw	48
  4417  000844  5C66               	subwf	delay_us@n,w,c
  4418  000846  B0D8               	btfsc	status,0,c
  4419  000848  D003               	goto	l1867
  4420  00084A                     l1863:
  4421  00084A  4A66               	infsnz	delay_us@n,f,c
  4422  00084C  2A67               	incf	delay_us@n+1,f,c
  4423  00084E  D7F5               	goto	l1859
  4424  000850                     l1867:
  4425                           
  4426                           ;interrupt.c: 78: usec--;
  4427  000850  0664               	decf	delay_us@usec,f,c
  4428  000852  A0D8               	btfss	status,0,c
  4429  000854  0665               	decf	delay_us@usec+1,f,c
  4430  000856                     l1869:
  4431  000856  BE65               	btfsc	delay_us@usec+1,7,c
  4432  000858  0012               	return	
  4433  00085A  5065               	movf	delay_us@usec+1,w,c
  4434  00085C  E1EA               	bnz	l1857
  4435  00085E  0464               	decf	delay_us@usec,w,c
  4436  000860  A0D8               	btfss	status,0,c
  4437  000862  0012               	return	
  4438  000864  D7E6               	goto	l1857
  4439  000866                     __end_of_delay_us:
  4440                           	opt stack 0
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           intcon	equ	0xFF2
  4448                           postinc0	equ	0xFEE
  4449                           wreg	equ	0xFE8
  4450                           postdec1	equ	0xFE5
  4451                           fsr1l	equ	0xFE1
  4452                           indf2	equ	0xFDF
  4453                           fsr2h	equ	0xFDA
  4454                           fsr2l	equ	0xFD9
  4455                           status	equ	0xFD8
  4456                           
  4457 ;; *************** function _WriteSPI *****************
  4458 ;; Defined at:
  4459 ;;		line 13 in file "src/spi_writ.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  data_out        1    wreg     unsigned char 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  data_out        1   15[COMRAM] unsigned char 
  4464 ;;  TempVar         1   14[COMRAM] unsigned char 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      char 
  4467 ;; Registers used:
  4468 ;;		wreg
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1
  4474 ;;      Params:         0       0       0
  4475 ;;      Locals:         2       0       0
  4476 ;;      Temps:          0       0       0
  4477 ;;      Totals:         2       0       0
  4478 ;;Total ram usage:        2 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    1
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		_read_spi_chain_single
  4485 ;;		_write_spi_chain
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text37
  4490  0009E8                     __ptext37:
  4491                           	opt stack 0
  4492  0009E8                     _WriteSPI:
  4493                           	opt stack 26
  4494                           
  4495                           ;incstack = 0
  4496                           ;WriteSPI@data_out stored from wreg
  4497  0009E8  6E65               	movwf	WriteSPI@data_out,c
  4498                           
  4499                           ;spi_writ.c: 15: unsigned char TempVar;
  4500                           ;spi_writ.c: 16: TempVar = SSPBUF;
  4501  0009EA  CFC9 F064          	movff	4041,WriteSPI@TempVar	;volatile
  4502                           
  4503                           ;spi_writ.c: 17: PIR1bits.SSPIF = 0;
  4504  0009EE  969E               	bcf	3998,3,c	;volatile
  4505                           
  4506                           ;spi_writ.c: 18: SSPCON1bits.WCOL = 0;
  4507  0009F0  9EC6               	bcf	4038,7,c	;volatile
  4508                           
  4509                           ;spi_writ.c: 19: SSPBUF = data_out;
  4510  0009F2  C065  FFC9         	movff	WriteSPI@data_out,4041	;volatile
  4511                           
  4512                           ;spi_writ.c: 20: if ( SSPCON1 & 0x80 )
  4513  0009F6  AEC6               	btfss	4038,7,c	;volatile
  4514  0009F8  D002               	goto	l515
  4515                           
  4516                           ;spi_writ.c: 21: return ( -1 );
  4517  0009FA  0EFF               	movlw	255
  4518  0009FC  0012               	return	
  4519  0009FE                     l515:
  4520  0009FE  A69E               	btfss	3998,3,c	;volatile
  4521  000A00  D7FE               	goto	l515
  4522                           
  4523                           ;spi_writ.c: 25: return ( 0 );
  4524  000A02  0E00               	movlw	0
  4525  000A04  0012               	return	
  4526  000A06                     __end_of_WriteSPI:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           intcon	equ	0xFF2
  4535                           postinc0	equ	0xFEE
  4536                           wreg	equ	0xFE8
  4537                           postdec1	equ	0xFE5
  4538                           fsr1l	equ	0xFE1
  4539                           indf2	equ	0xFDF
  4540                           fsr2h	equ	0xFDA
  4541                           fsr2l	equ	0xFD9
  4542                           status	equ	0xFD8
  4543                           
  4544 ;; *************** function _chksum_check *****************
  4545 ;; Defined at:
  4546 ;;		line 367 in file "src/L6474.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  unit            1    wreg     unsigned char 
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;  unit            1   15[COMRAM] unsigned char 
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      unsigned char 
  4553 ;; Registers used:
  4554 ;;		wreg, status,2, status,0, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1
  4560 ;;      Params:         0       0       0
  4561 ;;      Locals:         1       0       0
  4562 ;;      Temps:          0       0       0
  4563 ;;      Totals:         1       0       0
  4564 ;;Total ram usage:        1 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    2
  4567 ;; This function calls:
  4568 ;;		_get_eeprom_offset
  4569 ;;		_read_eeprom_data
  4570 ;; This function is called by:
  4571 ;;		_main
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text38
  4576  000866                     __ptext38:
  4577                           	opt stack 0
  4578  000866                     _chksum_check:
  4579                           	opt stack 28
  4580                           
  4581                           ;incstack = 0
  4582                           ;chksum_check@unit stored from wreg
  4583  000866  6E65               	movwf	chksum_check@unit,c
  4584                           
  4585                           ;L6474.c: 369: offset = get_eeprom_offset(unit);
  4586  000868  5065               	movf	chksum_check@unit,w,c
  4587  00086A  EC4E  F004         	call	_get_eeprom_offset
  4588  00086E  6E29               	movwf	_offset,c
  4589                           
  4590                           ;L6474.c: 371: value = 0;
  4591  000870  0E00               	movlw	0
  4592  000872  6E21               	movwf	L6474@value,c
  4593                           
  4594                           ;L6474.c: 372: for (n = 0; n < (((((((((((((((0) + 3) + 2) + 3) + 1) + 1) + 1) + 1) + 1)
      +                           + 1) + 1) + 1) + 2) + 2) + 1); n++) {
  4595  000874  0E00               	movlw	0
  4596  000876  6E20               	movwf	L6474@n,c
  4597  000878                     l1437:
  4598  000878  0E14               	movlw	20
  4599  00087A  6420               	cpfsgt	L6474@n,c
  4600  00087C  D001               	goto	l1441
  4601  00087E  D007               	goto	l1447
  4602  000880                     l1441:
  4603                           
  4604                           ;L6474.c: 373: value += read_eeprom_data(offset + n);
  4605  000880  5029               	movf	_offset,w,c
  4606  000882  2420               	addwf	L6474@n,w,c
  4607  000884  EC15  F006         	call	_read_eeprom_data
  4608  000888  2621               	addwf	L6474@value,f,c
  4609  00088A  2A20               	incf	L6474@n,f,c
  4610  00088C  D7F5               	goto	l1437
  4611  00088E                     l1447:
  4612                           
  4613                           ;L6474.c: 374: }
  4614                           ;L6474.c: 375: if (value == 0) {
  4615  00088E  5021               	movf	L6474@value,w,c
  4616  000890  A4D8               	btfss	status,2,c
  4617  000892  D002               	goto	l1453
  4618                           
  4619                           ;L6474.c: 376: return 1;
  4620  000894  0E01               	movlw	1
  4621  000896  0012               	return	
  4622  000898                     l1453:
  4623                           
  4624                           ;L6474.c: 377: }
  4625                           ;L6474.c: 378: return 0;
  4626  000898  0E00               	movlw	0
  4627  00089A  0012               	return	
  4628  00089C                     __end_of_chksum_check:
  4629                           	opt stack 0
  4630                           tblptru	equ	0xFF8
  4631                           tblptrh	equ	0xFF7
  4632                           tblptrl	equ	0xFF6
  4633                           tablat	equ	0xFF5
  4634                           prodh	equ	0xFF4
  4635                           prodl	equ	0xFF3
  4636                           intcon	equ	0xFF2
  4637                           postinc0	equ	0xFEE
  4638                           wreg	equ	0xFE8
  4639                           postdec1	equ	0xFE5
  4640                           fsr1l	equ	0xFE1
  4641                           indf2	equ	0xFDF
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function _blank_check *****************
  4647 ;; Defined at:
  4648 ;;		line 355 in file "src/L6474.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  unit            1    wreg     unsigned char 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  unit            1   15[COMRAM] unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      unsigned char 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1
  4662 ;;      Params:         0       0       0
  4663 ;;      Locals:         1       0       0
  4664 ;;      Temps:          0       0       0
  4665 ;;      Totals:         1       0       0
  4666 ;;Total ram usage:        1 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    2
  4669 ;; This function calls:
  4670 ;;		_get_eeprom_offset
  4671 ;;		_read_eeprom_data
  4672 ;; This function is called by:
  4673 ;;		_main
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text39
  4678  0008CE                     __ptext39:
  4679                           	opt stack 0
  4680  0008CE                     _blank_check:
  4681                           	opt stack 28
  4682                           
  4683                           ;incstack = 0
  4684                           ;blank_check@unit stored from wreg
  4685  0008CE  6E65               	movwf	blank_check@unit,c
  4686                           
  4687                           ;L6474.c: 357: offset = get_eeprom_offset(unit);
  4688  0008D0  5065               	movf	blank_check@unit,w,c
  4689  0008D2  EC4E  F004         	call	_get_eeprom_offset
  4690  0008D6  6E29               	movwf	_offset,c
  4691                           
  4692                           ;L6474.c: 359: for (n = 0; n < (((((((((((((((0) + 3) + 2) + 3) + 1) + 1) + 1) + 1) + 1)
      +                           + 1) + 1) + 1) + 2) + 2) + 1); n++) {
  4693  0008D8  0E00               	movlw	0
  4694  0008DA  6E20               	movwf	L6474@n,c
  4695  0008DC                     l1413:
  4696  0008DC  0E14               	movlw	20
  4697  0008DE  6420               	cpfsgt	L6474@n,c
  4698  0008E0  D001               	goto	l1417
  4699  0008E2  D00B               	goto	l1427
  4700  0008E4                     l1417:
  4701                           
  4702                           ;L6474.c: 360: if (read_eeprom_data(offset + n) != 0xff) {
  4703  0008E4  5029               	movf	_offset,w,c
  4704  0008E6  2420               	addwf	L6474@n,w,c
  4705  0008E8  EC15  F006         	call	_read_eeprom_data
  4706  0008EC  0AFF               	xorlw	255
  4707  0008EE  B4D8               	btfsc	status,2,c
  4708  0008F0  D002               	goto	l1423
  4709                           
  4710                           ;L6474.c: 361: return 0;
  4711  0008F2  0E00               	movlw	0
  4712  0008F4  0012               	return	
  4713  0008F6                     l1423:
  4714  0008F6  2A20               	incf	L6474@n,f,c
  4715  0008F8  D7F1               	goto	l1413
  4716  0008FA                     l1427:
  4717                           
  4718                           ;L6474.c: 362: }
  4719                           ;L6474.c: 363: }
  4720                           ;L6474.c: 364: return 1;
  4721  0008FA  0E01               	movlw	1
  4722  0008FC  0012               	return	
  4723  0008FE                     __end_of_blank_check:
  4724                           	opt stack 0
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           prodh	equ	0xFF4
  4730                           prodl	equ	0xFF3
  4731                           intcon	equ	0xFF2
  4732                           postinc0	equ	0xFEE
  4733                           wreg	equ	0xFE8
  4734                           postdec1	equ	0xFE5
  4735                           fsr1l	equ	0xFE1
  4736                           indf2	equ	0xFDF
  4737                           fsr2h	equ	0xFDA
  4738                           fsr2l	equ	0xFD9
  4739                           status	equ	0xFD8
  4740                           
  4741 ;; *************** function _read_eeprom_data *****************
  4742 ;; Defined at:
  4743 ;;		line 6 in file "src/eeprom.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  addr            1    wreg     unsigned char 
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;  addr            1   14[COMRAM] unsigned char 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  1    wreg      unsigned char 
  4750 ;; Registers used:
  4751 ;;		wreg, status,2
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1
  4757 ;;      Params:         0       0       0
  4758 ;;      Locals:         1       0       0
  4759 ;;      Temps:          0       0       0
  4760 ;;      Totals:         1       0       0
  4761 ;;Total ram usage:        1 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    1
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		_copy_from_eeprom
  4768 ;;		_blank_check
  4769 ;;		_chksum_check
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text40
  4774  000C2A                     __ptext40:
  4775                           	opt stack 0
  4776  000C2A                     _read_eeprom_data:
  4777                           	opt stack 28
  4778                           
  4779                           ;incstack = 0
  4780                           ;read_eeprom_data@addr stored from wreg
  4781  000C2A  6E64               	movwf	read_eeprom_data@addr,c
  4782                           
  4783                           ;eeprom.c: 15: EEADR = addr;
  4784  000C2C  C064  FFA9         	movff	read_eeprom_data@addr,4009	;volatile
  4785                           
  4786                           ;eeprom.c: 16: EECON1bits.EEPGD = 0;
  4787  000C30  9EA6               	bcf	4006,7,c	;volatile
  4788                           
  4789                           ;eeprom.c: 17: EECON1bits.CFGS = 0;
  4790  000C32  9CA6               	bcf	4006,6,c	;volatile
  4791                           
  4792                           ;eeprom.c: 18: EECON1bits.RD = 1;
  4793  000C34  80A6               	bsf	4006,0,c	;volatile
  4794                           
  4795                           ;eeprom.c: 19: return EEDATA;
  4796  000C36  50A8               	movf	4008,w,c	;volatile
  4797  000C38  0012               	return	
  4798  000C3A                     __end_of_read_eeprom_data:
  4799                           	opt stack 0
  4800                           tblptru	equ	0xFF8
  4801                           tblptrh	equ	0xFF7
  4802                           tblptrl	equ	0xFF6
  4803                           tablat	equ	0xFF5
  4804                           prodh	equ	0xFF4
  4805                           prodl	equ	0xFF3
  4806                           intcon	equ	0xFF2
  4807                           postinc0	equ	0xFEE
  4808                           wreg	equ	0xFE8
  4809                           postdec1	equ	0xFE5
  4810                           fsr1l	equ	0xFE1
  4811                           indf2	equ	0xFDF
  4812                           fsr2h	equ	0xFDA
  4813                           fsr2l	equ	0xFD9
  4814                           status	equ	0xFD8
  4815                           
  4816 ;; *************** function _get_eeprom_offset *****************
  4817 ;; Defined at:
  4818 ;;		line 268 in file "src/L6474.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;  unit            1    wreg     unsigned char 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  unit            1   14[COMRAM] unsigned char 
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      unsigned char 
  4825 ;; Registers used:
  4826 ;;		wreg, status,2, status,0
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1
  4832 ;;      Params:         0       0       0
  4833 ;;      Locals:         1       0       0
  4834 ;;      Temps:          0       0       0
  4835 ;;      Totals:         1       0       0
  4836 ;;Total ram usage:        1 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    1
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_copy_from_eeprom
  4843 ;;		_blank_check
  4844 ;;		_chksum_check
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text41
  4849  00089C                     __ptext41:
  4850                           	opt stack 0
  4851  00089C                     _get_eeprom_offset:
  4852                           	opt stack 28
  4853                           
  4854                           ;incstack = 0
  4855                           ;get_eeprom_offset@unit stored from wreg
  4856  00089C  6E64               	movwf	get_eeprom_offset@unit,c
  4857                           
  4858                           ;L6474.c: 269: if (unit == (0))
  4859  00089E  5064               	movf	get_eeprom_offset@unit,w,c
  4860  0008A0  A4D8               	btfss	status,2,c
  4861  0008A2  D002               	goto	l1265
  4862                           
  4863                           ;L6474.c: 270: return (0) * (0x20);
  4864  0008A4  0E00               	movlw	0
  4865  0008A6  0012               	return	
  4866  0008A8                     l1265:
  4867                           
  4868                           ;L6474.c: 272: if (unit == (1))
  4869  0008A8  0464               	decf	get_eeprom_offset@unit,w,c
  4870  0008AA  A4D8               	btfss	status,2,c
  4871  0008AC  D002               	goto	l1271
  4872                           
  4873                           ;L6474.c: 273: return (1) * (0x20);
  4874  0008AE  0E20               	movlw	32
  4875  0008B0  0012               	return	
  4876  0008B2                     l1271:
  4877                           
  4878                           ;L6474.c: 275: if (unit == (2))
  4879  0008B2  0E02               	movlw	2
  4880  0008B4  1864               	xorwf	get_eeprom_offset@unit,w,c
  4881  0008B6  A4D8               	btfss	status,2,c
  4882  0008B8  D002               	goto	l1277
  4883                           
  4884                           ;L6474.c: 276: return (2) * (0x20);
  4885  0008BA  0E40               	movlw	64
  4886  0008BC  0012               	return	
  4887  0008BE                     l1277:
  4888                           
  4889                           ;L6474.c: 278: if (unit == (3))
  4890  0008BE  0E03               	movlw	3
  4891  0008C0  1864               	xorwf	get_eeprom_offset@unit,w,c
  4892  0008C2  A4D8               	btfss	status,2,c
  4893  0008C4  D002               	goto	l1283
  4894                           
  4895                           ;L6474.c: 279: return (3) * (0x20);
  4896  0008C6  0E60               	movlw	96
  4897  0008C8  0012               	return	
  4898  0008CA                     l1283:
  4899                           
  4900                           ;L6474.c: 282: return (3) * (0x20);
  4901  0008CA  0E60               	movlw	96
  4902  0008CC  0012               	return	
  4903  0008CE                     __end_of_get_eeprom_offset:
  4904                           	opt stack 0
  4905                           tblptru	equ	0xFF8
  4906                           tblptrh	equ	0xFF7
  4907                           tblptrl	equ	0xFF6
  4908                           tablat	equ	0xFF5
  4909                           prodh	equ	0xFF4
  4910                           prodl	equ	0xFF3
  4911                           intcon	equ	0xFF2
  4912                           postinc0	equ	0xFEE
  4913                           wreg	equ	0xFE8
  4914                           postdec1	equ	0xFE5
  4915                           fsr1l	equ	0xFE1
  4916                           indf2	equ	0xFDF
  4917                           fsr2h	equ	0xFDA
  4918                           fsr2l	equ	0xFD9
  4919                           status	equ	0xFD8
  4920                           
  4921 ;; *************** function _OpenSPI *****************
  4922 ;; Defined at:
  4923 ;;		line 14 in file "src/spi_open.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  sync_mode       1    wreg     unsigned char 
  4926 ;;  bus_mode        1   14[COMRAM] unsigned char 
  4927 ;;  smp_phase       1   15[COMRAM] unsigned char 
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;  sync_mode       1   16[COMRAM] unsigned char 
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  1    wreg      void 
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMRAM   BANK0   BANK1
  4939 ;;      Params:         2       0       0
  4940 ;;      Locals:         1       0       0
  4941 ;;      Temps:          0       0       0
  4942 ;;      Totals:         3       0       0
  4943 ;;Total ram usage:        3 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    1
  4946 ;; This function calls:
  4947 ;;		Nothing
  4948 ;; This function is called by:
  4949 ;;		_main
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           	psect	text42
  4954  00074C                     __ptext42:
  4955                           	opt stack 0
  4956  00074C                     _OpenSPI:
  4957                           	opt stack 29
  4958                           
  4959                           ;incstack = 0
  4960                           ;OpenSPI@sync_mode stored from wreg
  4961  00074C  6E66               	movwf	OpenSPI@sync_mode,c
  4962                           
  4963                           ;spi_open.c: 16: SSPSTAT &= 0x3F;
  4964  00074E  0E3F               	movlw	63
  4965  000750  16C7               	andwf	4039,f,c	;volatile
  4966                           
  4967                           ;spi_open.c: 17: SSPCON1 = 0x00;
  4968  000752  0E00               	movlw	0
  4969  000754  6EC6               	movwf	4038,c	;volatile
  4970                           
  4971                           ;spi_open.c: 18: SSPCON1 |= sync_mode;
  4972  000756  5066               	movf	OpenSPI@sync_mode,w,c
  4973  000758  12C6               	iorwf	4038,f,c	;volatile
  4974                           
  4975                           ;spi_open.c: 19: SSPSTAT |= smp_phase;
  4976  00075A  5065               	movf	OpenSPI@smp_phase,w,c
  4977  00075C  12C7               	iorwf	4039,f,c	;volatile
  4978                           
  4979                           ;spi_open.c: 21: switch( bus_mode )
  4980  00075E  D005               	goto	l2123
  4981  000760                     l491:
  4982                           
  4983                           ;spi_open.c: 24: SSPSTATbits.CKE = 1;
  4984  000760  8CC7               	bsf	4039,6,c	;volatile
  4985                           
  4986                           ;spi_open.c: 25: break;
  4987  000762  D015               	goto	l2127
  4988  000764                     l493:
  4989                           
  4990                           ;spi_open.c: 27: SSPSTATbits.CKE = 1;
  4991  000764  8CC7               	bsf	4039,6,c	;volatile
  4992  000766                     l494:
  4993                           
  4994                           ;spi_open.c: 31: SSPCON1bits.CKP = 1;
  4995  000766  88C6               	bsf	4038,4,c	;volatile
  4996                           
  4997                           ;spi_open.c: 35: }
  4998                           
  4999                           ;spi_open.c: 34: break;
  5000                           
  5001                           ;spi_open.c: 33: default:
  5002                           
  5003                           ;spi_open.c: 32: break;
  5004  000768  D012               	goto	l2127
  5005  00076A                     l2123:
  5006  00076A  5064               	movf	OpenSPI@bus_mode,w,c
  5007                           
  5008                           ; Switch size 1, requested type "space"
  5009                           ; Number of cases is 3, Range of values is 0 to 3
  5010                           ; switch strategies available:
  5011                           ; Name         Instructions Cycles
  5012                           ; simple_byte           10     6 (average)
  5013                           ;	Chosen strategy is simple_byte
  5014  00076C  0A00               	xorlw	0	; case 0
  5015  00076E  B4D8               	btfsc	status,2,c
  5016  000770  D7F7               	goto	l491
  5017  000772  0A02               	xorlw	2	; case 2
  5018  000774  B4D8               	btfsc	status,2,c
  5019  000776  D7F6               	goto	l493
  5020  000778  0A01               	xorlw	1	; case 3
  5021  00077A  B4D8               	btfsc	status,2,c
  5022  00077C  D7F4               	goto	l494
  5023                           
  5024                           ;spi_open.c: 37: switch( sync_mode )
  5025  00077E  D007               	goto	l2127
  5026  000780                     l497:
  5027                           
  5028                           ;spi_open.c: 41: TRISCbits.TRISC3 = 1;
  5029  000780  8694               	bsf	3988,3,c	;volatile
  5030                           
  5031                           ;spi_open.c: 42: TRISAbits.TRISA5 = 1;
  5032  000782  8A92               	bsf	3986,5,c	;volatile
  5033                           
  5034                           ;spi_open.c: 60: break;
  5035  000784  D00C               	goto	l498
  5036  000786                     l499:
  5037                           
  5038                           ;spi_open.c: 64: TRISCbits.TRISC3 = 1;
  5039  000786  8694               	bsf	3988,3,c	;volatile
  5040                           
  5041                           ;spi_open.c: 72: break;
  5042  000788  D00A               	goto	l498
  5043  00078A                     l500:
  5044                           
  5045                           ;spi_open.c: 76: TRISCbits.TRISC3 = 0;
  5046  00078A  9694               	bcf	3988,3,c	;volatile
  5047                           
  5048                           ;spi_open.c: 86: }
  5049                           
  5050                           ;spi_open.c: 85: break;
  5051  00078C  D008               	goto	l498
  5052  00078E                     l2127:
  5053  00078E  5066               	movf	OpenSPI@sync_mode,w,c
  5054                           
  5055                           ; Switch size 1, requested type "space"
  5056                           ; Number of cases is 2, Range of values is 4 to 5
  5057                           ; switch strategies available:
  5058                           ; Name         Instructions Cycles
  5059                           ; simple_byte            7     4 (average)
  5060                           ;	Chosen strategy is simple_byte
  5061  000790  0A04               	xorlw	4	; case 4
  5062  000792  B4D8               	btfsc	status,2,c
  5063  000794  D7F5               	goto	l497
  5064  000796  0A01               	xorlw	1	; case 5
  5065  000798  B4D8               	btfsc	status,2,c
  5066  00079A  D7F5               	goto	l499
  5067  00079C  D7F6               	goto	l500
  5068  00079E                     l498:
  5069                           
  5070                           ;spi_open.c: 97: TRISCbits.TRISC4 = 1;
  5071  00079E  8894               	bsf	3988,4,c	;volatile
  5072                           
  5073                           ;spi_open.c: 98: TRISCbits.TRISC5 = 0;
  5074  0007A0  9A94               	bcf	3988,5,c	;volatile
  5075                           
  5076                           ;spi_open.c: 101: SSPCON1 |= 0b00100000;
  5077  0007A2  8AC6               	bsf	4038,5,c	;volatile
  5078  0007A4  0012               	return		;funcret
  5079  0007A6                     __end_of_OpenSPI:
  5080                           	opt stack 0
  5081                           tblptru	equ	0xFF8
  5082                           tblptrh	equ	0xFF7
  5083                           tblptrl	equ	0xFF6
  5084                           tablat	equ	0xFF5
  5085                           prodh	equ	0xFF4
  5086                           prodl	equ	0xFF3
  5087                           intcon	equ	0xFF2
  5088                           postinc0	equ	0xFEE
  5089                           wreg	equ	0xFE8
  5090                           postdec1	equ	0xFE5
  5091                           fsr1l	equ	0xFE1
  5092                           indf2	equ	0xFDF
  5093                           fsr2h	equ	0xFDA
  5094                           fsr2l	equ	0xFD9
  5095                           status	equ	0xFD8
  5096                           
  5097 ;; *************** function _high_isr *****************
  5098 ;; Defined at:
  5099 ;;		line 10 in file "src/interrupt.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;		None
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;		None
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  1    wreg      void 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1
  5113 ;;      Params:         0       0       0
  5114 ;;      Locals:         0       0       0
  5115 ;;      Temps:         14       0       0
  5116 ;;      Totals:        14       0       0
  5117 ;;Total ram usage:       14 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; This function calls:
  5120 ;;		Nothing
  5121 ;; This function is called by:
  5122 ;;		Interrupt level 2
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	intcode
  5127  000008                     __pintcode:
  5128                           	opt stack 0
  5129  000008                     _high_isr:
  5130                           	opt stack 26
  5131                           
  5132                           ;incstack = 0
  5133  000008  826E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5134  00000A  CFFA F056          	movff	pclath,??_high_isr
  5135  00000E  CFFB F057          	movff	pclatu,??_high_isr+1
  5136  000012  CFE9 F058          	movff	fsr0l,??_high_isr+2
  5137  000016  CFEA F059          	movff	fsr0h,??_high_isr+3
  5138  00001A  CFE1 F05A          	movff	fsr1l,??_high_isr+4
  5139  00001E  CFE2 F05B          	movff	fsr1h,??_high_isr+5
  5140  000022  CFD9 F05C          	movff	fsr2l,??_high_isr+6
  5141  000026  CFDA F05D          	movff	fsr2h,??_high_isr+7
  5142  00002A  CFF3 F05E          	movff	prodl,??_high_isr+8
  5143  00002E  CFF4 F05F          	movff	prodh,??_high_isr+9
  5144  000032  CFF6 F060          	movff	tblptrl,??_high_isr+10
  5145  000036  CFF7 F061          	movff	tblptrh,??_high_isr+11
  5146  00003A  CFF8 F062          	movff	tblptru,??_high_isr+12
  5147  00003E  CFF5 F063          	movff	tablat,??_high_isr+13
  5148                           
  5149                           ;interrupt.c: 55: T1CONbits.TMR1ON = 0;
  5150  000042  90CD               	bcf	4045,0,c	;volatile
  5151                           
  5152                           ;interrupt.c: 56: PIR1bits.TMR1IF = 0;
  5153  000044  909E               	bcf	3998,0,c	;volatile
  5154                           
  5155                           ;interrupt.c: 61: total_1ms_tick++;
  5156  000046  4A6C               	infsnz	_total_1ms_tick,f,c
  5157  000048  2A6D               	incf	_total_1ms_tick+1,f,c
  5158                           
  5159                           ;interrupt.c: 62: led_timer++;
  5160  00004A  4A1E               	infsnz	_led_timer,f,c
  5161  00004C  2A1F               	incf	_led_timer+1,f,c
  5162                           
  5163                           ;interrupt.c: 68: TMR1H = 0xFC;
  5164  00004E  0EFC               	movlw	252
  5165  000050  6ECF               	movwf	4047,c	;volatile
  5166                           
  5167                           ;interrupt.c: 69: TMR1L = 0x17;
  5168  000052  0E17               	movlw	23
  5169  000054  6ECE               	movwf	4046,c	;volatile
  5170                           
  5171                           ;interrupt.c: 70: T1CONbits.TMR1ON = 1;
  5172  000056  80CD               	bsf	4045,0,c	;volatile
  5173  000058  C063  FFF5         	movff	??_high_isr+13,tablat
  5174  00005C  C062  FFF8         	movff	??_high_isr+12,tblptru
  5175  000060  C061  FFF7         	movff	??_high_isr+11,tblptrh
  5176  000064  C060  FFF6         	movff	??_high_isr+10,tblptrl
  5177  000068  C05F  FFF4         	movff	??_high_isr+9,prodh
  5178  00006C  C05E  FFF3         	movff	??_high_isr+8,prodl
  5179  000070  C05D  FFDA         	movff	??_high_isr+7,fsr2h
  5180  000074  C05C  FFD9         	movff	??_high_isr+6,fsr2l
  5181  000078  C05B  FFE2         	movff	??_high_isr+5,fsr1h
  5182  00007C  C05A  FFE1         	movff	??_high_isr+4,fsr1l
  5183  000080  C059  FFEA         	movff	??_high_isr+3,fsr0h
  5184  000084  C058  FFE9         	movff	??_high_isr+2,fsr0l
  5185  000088  C057  FFFB         	movff	??_high_isr+1,pclatu
  5186  00008C  C056  FFFA         	movff	??_high_isr,pclath
  5187  000090  926E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5188  000092  0011               	retfie		f
  5189  000094                     __end_of_high_isr:
  5190                           	opt stack 0
  5191  0000                     pclatu	equ	0xFFB
  5192                           pclath	equ	0xFFA
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           postinc0	equ	0xFEE
  5201                           fsr0h	equ	0xFEA
  5202                           fsr0l	equ	0xFE9
  5203                           wreg	equ	0xFE8
  5204                           postdec1	equ	0xFE5
  5205                           fsr1h	equ	0xFE2
  5206                           fsr1l	equ	0xFE1
  5207                           indf2	equ	0xFDF
  5208                           fsr2h	equ	0xFDA
  5209                           fsr2l	equ	0xFD9
  5210                           status	equ	0xFD8
  5211                           pclatu	equ	0xFFB
  5212                           pclath	equ	0xFFA
  5213                           tblptru	equ	0xFF8
  5214                           tblptrh	equ	0xFF7
  5215                           tblptrl	equ	0xFF6
  5216                           tablat	equ	0xFF5
  5217                           prodh	equ	0xFF4
  5218                           prodl	equ	0xFF3
  5219                           intcon	equ	0xFF2
  5220                           postinc0	equ	0xFEE
  5221                           fsr0h	equ	0xFEA
  5222                           fsr0l	equ	0xFE9
  5223                           wreg	equ	0xFE8
  5224                           postdec1	equ	0xFE5
  5225                           fsr1h	equ	0xFE2
  5226                           fsr1l	equ	0xFE1
  5227                           indf2	equ	0xFDF
  5228                           fsr2h	equ	0xFDA
  5229                           fsr2l	equ	0xFD9
  5230                           status	equ	0xFD8
  5231                           
  5232                           	psect	rparam
  5233  0000                     pclatu	equ	0xFFB
  5234                           pclath	equ	0xFFA
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           postinc0	equ	0xFEE
  5243                           fsr0h	equ	0xFEA
  5244                           fsr0l	equ	0xFE9
  5245                           wreg	equ	0xFE8
  5246                           postdec1	equ	0xFE5
  5247                           fsr1h	equ	0xFE2
  5248                           fsr1l	equ	0xFE1
  5249                           indf2	equ	0xFDF
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254                           	psect	temp
  5255  00006E                     btemp:
  5256                           	opt stack 0
  5257  00006E                     	ds	1
  5258  0000                     int$flags	set	btemp
  5259                           pclatu	equ	0xFFB
  5260                           pclath	equ	0xFFA
  5261                           tblptru	equ	0xFF8
  5262                           tblptrh	equ	0xFF7
  5263                           tblptrl	equ	0xFF6
  5264                           tablat	equ	0xFF5
  5265                           prodh	equ	0xFF4
  5266                           prodl	equ	0xFF3
  5267                           intcon	equ	0xFF2
  5268                           postinc0	equ	0xFEE
  5269                           fsr0h	equ	0xFEA
  5270                           fsr0l	equ	0xFE9
  5271                           wreg	equ	0xFE8
  5272                           postdec1	equ	0xFE5
  5273                           fsr1h	equ	0xFE2
  5274                           fsr1l	equ	0xFE1
  5275                           indf2	equ	0xFDF
  5276                           fsr2h	equ	0xFDA
  5277                           fsr2l	equ	0xFD9
  5278                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        37
    BSS         48
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     22     109
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_copy_from_eeprom
    _main->_get_abs_pos
    _main->_get_adc_out
    _main->_get_alarm_en
    _main->_get_config
    _main->_get_el_pos
    _main->_get_mark
    _main->_get_ocd_th
    _main->_get_status
    _main->_get_step_mode
    _main->_get_t_fast
    _main->_get_toff_min
    _main->_get_ton_min
    _main->_get_tval
    _main->_reset_position
    _reset_position->_set_abs_pos
    _reset_position->_set_el_pos
    _motor_enable->_write_spi_chain
    _motor_disable->_write_spi_chain
    _get_tval->_read_spi_chain
    _get_ton_min->_read_spi_chain
    _get_toff_min->_read_spi_chain
    _get_t_fast->_read_spi_chain
    _get_step_mode->_read_spi_chain
    _get_status->_read_spi_chain
    _get_ocd_th->_read_spi_chain
    _get_mark->_read_spi_chain
    _get_el_pos->_read_spi_chain
    _get_config->_read_spi_chain
    _get_alarm_en->_read_spi_chain
    _get_adc_out->_read_spi_chain
    _get_abs_pos->_read_spi_chain
    _read_spi_chain->_read_spi_chain_single
    _read_spi_chain_single->_delay_us
    _copy_from_eeprom->_set_abs_pos
    _copy_from_eeprom->_set_adc_out
    _copy_from_eeprom->_set_alarm_en
    _copy_from_eeprom->_set_config
    _copy_from_eeprom->_set_el_pos
    _copy_from_eeprom->_set_mark
    _copy_from_eeprom->_set_ocd_th
    _copy_from_eeprom->_set_step_mode
    _copy_from_eeprom->_set_t_fast
    _copy_from_eeprom->_set_toff_min
    _copy_from_eeprom->_set_ton_min
    _copy_from_eeprom->_set_tval
    _set_tval->_write_spi_chain
    _set_ton_min->_write_spi_chain
    _set_toff_min->_write_spi_chain
    _set_t_fast->_write_spi_chain
    _set_step_mode->_write_spi_chain
    _set_ocd_th->_write_spi_chain
    _set_mark->_write_spi_chain
    _set_el_pos->_write_spi_chain
    _set_config->_write_spi_chain
    _set_alarm_en->_write_spi_chain
    _set_adc_out->_write_spi_chain
    _set_abs_pos->_write_spi_chain
    _write_spi_chain->_delay_us
    _chksum_check->_get_eeprom_offset
    _chksum_check->_read_eeprom_data
    _blank_check->_get_eeprom_offset
    _blank_check->_read_eeprom_data

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   84928
                            _OpenSPI
                        _blank_check
                       _chksum_check
                   _copy_from_eeprom
                        _get_abs_pos
                        _get_adc_out
                       _get_alarm_en
                         _get_config
                         _get_el_pos
                           _get_mark
                         _get_ocd_th
                         _get_status
                      _get_step_mode
                         _get_t_fast
                       _get_toff_min
                        _get_ton_min
                           _get_tval
                      _motor_disable
                       _motor_enable
                     _reset_position
                          _uart_getc
                          _uart_putc
                  _write_eeprom_data
 ---------------------------------------------------------------------------------
 (1) _write_eeprom_data                                    2     1      1     259
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _uart_putc                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_getc                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _reset_position                                       1     1      0    4932
                                             21 COMRAM     1     1      0
                        _set_abs_pos
                         _set_el_pos
 ---------------------------------------------------------------------------------
 (1) _motor_enable                                         1     1      0    2389
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _motor_disable                                        1     1      0    2389
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_tval                                             1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_ton_min                                          1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_toff_min                                         1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_t_fast                                           1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_step_mode                                        1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_status                                           1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_ocd_th                                           1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_mark                                             1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_el_pos                                           1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_config                                           1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_alarm_en                                         1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_adc_out                                          1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (1) _get_abs_pos                                          1     1      0    3468
                                             21 COMRAM     1     1      0
                     _read_spi_chain
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _read_spi_chain                                       2     1      1    1057
                                             19 COMRAM     2     1      1
              _read_spi_chain_single
 ---------------------------------------------------------------------------------
 (3) _read_spi_chain_single                                1     1      0     344
                                             18 COMRAM     1     1      0
                           _WriteSPI
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _copy_from_eeprom                                     1     1      0   29491
                                             21 COMRAM     1     1      0
                  _get_eeprom_offset
                   _read_eeprom_data
                        _set_abs_pos
                        _set_adc_out
                       _set_alarm_en
                         _set_config
                         _set_el_pos
                           _set_mark
                         _set_ocd_th
                      _set_step_mode
                         _set_t_fast
                       _set_toff_min
                        _set_ton_min
                           _set_tval
 ---------------------------------------------------------------------------------
 (2) _set_tval                                             1     1      0    2411
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_ton_min                                          1     1      0    2411
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_toff_min                                         1     1      0    2411
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_t_fast                                           1     1      0    2411
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_step_mode                                        1     1      0    2411
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_ocd_th                                           1     1      0    2411
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_mark                                             1     1      0    2455
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_el_pos                                           1     1      0    2433
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_config                                           1     1      0    2433
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_alarm_en                                         1     1      0    2411
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_adc_out                                          1     1      0    2411
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (2) _set_abs_pos                                          1     1      0    2455
                                             20 COMRAM     1     1      0
                    _write_spi_chain
 ---------------------------------------------------------------------------------
 (3) _write_spi_chain                                      2     1      1    2367
                                             18 COMRAM     2     1      1
                           _WriteSPI
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             4     2      2     241
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _WriteSPI                                             2     2      0      15
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _chksum_check                                         1     1      0      90
                                             15 COMRAM     1     1      0
                  _get_eeprom_offset
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (1) _blank_check                                          1     1      0      90
                                             15 COMRAM     1     1      0
                  _get_eeprom_offset
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _read_eeprom_data                                     1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _get_eeprom_offset                                    1     1      0      60
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _OpenSPI                                              3     1      2     174
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenSPI
   _blank_check
     _get_eeprom_offset
     _read_eeprom_data
   _chksum_check
     _get_eeprom_offset
     _read_eeprom_data
   _copy_from_eeprom
     _get_eeprom_offset
     _read_eeprom_data
     _set_abs_pos
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_adc_out
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_alarm_en
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_config
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_el_pos
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_mark
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_ocd_th
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_step_mode
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_t_fast
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_toff_min
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_ton_min
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_tval
       _write_spi_chain
         _WriteSPI
         _delay_us
   _get_abs_pos
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_adc_out
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_alarm_en
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_config
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_el_pos
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_mark
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_ocd_th
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_status
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_step_mode
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_t_fast
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_toff_min
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_ton_min
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _get_tval
     _read_spi_chain
       _read_spi_chain_single
         _WriteSPI
         _delay_us
     _write_spi_chain
       _WriteSPI
       _delay_us
   _motor_disable
     _write_spi_chain
       _WriteSPI
       _delay_us
   _motor_enable
     _write_spi_chain
       _WriteSPI
       _delay_us
   _reset_position
     _set_abs_pos
       _write_spi_chain
         _WriteSPI
         _delay_us
     _set_el_pos
       _write_spi_chain
         _WriteSPI
         _delay_us
   _uart_getc
   _uart_putc
   _write_eeprom_data

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     16      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6D       7        0.0%
DATA                 0      0      6D       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 10 18:05:05 2017

                             _i 0024                               _n 0028                    ?_get_ton_min 0056  
                   _SSPSTATbits 000FC7                     __CFG_BOR$ON 000000                              _rx 002D  
           write_spi_chain@unit 0068                     __CFG_BORV$2 000000                   ?_get_toff_min 0056  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000          ?_read_spi_chain_single 0056  
                           l500 078A                             l420 049A                             l515 09FE  
                           l452 0C24                             l437 050E                             l198 0974  
                           l438 050A                             l464 0C56                             l368 0144  
                           l449 0C1C        __end_of_copy_from_eeprom 063A                             l491 0760  
                           l493 0764                             l494 0766                             l497 0780  
                           l498 079E                             l499 0786                    __CFG_CPB$OFF 000000  
                  __CFG_CPD$OFF 000000            write_spi_chain@value 0069                             prod 000FF3  
                           wreg 000FE8                  ??_get_alarm_en 006B                    __CFG_LVP$OFF 000000  
                ?_get_step_mode 0056                    __CFG_WDT$OFF 000000                            l2123 076A  
                          l2211 011A                            l1413 08DC                            l2221 013C  
                          l2127 078E                            l1271 08B2                            l1423 08F6  
                          l2311 02A4                            l2303 0294                            l1265 08A8  
                          l1417 08E4                            l1441 0880                            l2321 02E6  
                          l2313 02A8                            l1283 08CA                            l1427 08FA  
                          l2411 0472                            l2403 044C                            l2323 02EE  
                          l2315 02AC                            l2235 0160                            l1277 08BE  
                          l1453 0898                            l1437 0878                            l2405 0466  
                          l2309 02A0                            l2253 0194                            l2245 017C  
                          l2229 0150                            l1447 088E                            l2407 046A  
                          l2319 02B2                            l2247 0188                            l2441 04DC  
                          l2417 0492                            l2425 04A6                            l2273 022E  
                          l2249 018C                            l2451 0504                            l2419 049E  
                          l2371 03BC                            l2427 04B6                            l2283 0250  
                          l2259 0206                            l2453 0512                            l2437 04D4  
                          l2285 025A                            l2269 0226                            l1903 06B8  
                          l2447 0500                            l2279 024C                            l2393 043A  
                          l2377 03D0                            l2395 043E                            l2379 040A  
                          l1941 0730                            l1909 06C4                            l2397 0442  
                          l2389 0432                            l1863 084A                            l1935 070C  
                          l1951 07B4                            l2399 0446                            l1857 0832  
                          l1937 0718                            l1881 067A                            l1953 07C6  
                          l1867 0850                            l1859 083A                            l1939 0724  
                          l1891 06A2                            l1875 064A                            l1869 0856  
                          l1877 065A                            l1949 07AA                            l1957 07E0  
                          l1879 066A                            l1897 06AC                    __CFG_PWRT$ON 000000  
                  get_mark@unit 006B                            _main 0098                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 006E                            prodh 000FF4                            prodl 000FF3  
                          start 0094                   __CFG_IESO$OFF 000000                chksum_check@unit 0065  
                  ___param_bank 000000                 get_abs_pos@unit 006B                motor_enable@unit 006A  
               __end_of_OpenSPI 07A6                  ??_get_toff_min 006B                           ?_main 0056  
                         _EEADR 000FA9                           _T1CON 000FCD                           _RCREG 000FAE  
                         _TMR0H 000FD7                           _TMR1H 000FCF                           _TMR0L 000FD6  
                         _TMR1L 000FCE                           _SPBRG 000FAF                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TXREG 000FAD  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                ??_read_spi_chain 006A  
                __CFG_EBTRB$OFF 000000                    get_tval@unit 006B                           _value 0030  
                         _state 002F                           pclath 000FFA                           tablat 000FF5  
                         status 000FD8            __size_of_blank_check 0030                  __CFG_MCLRE$OFF 000000  
                get_el_pos@unit 006B                 __initialization 07F6                    __end_of_main 0518  
                        L6474@n 0020                          ??_main 006C                  get_config@unit 006B  
                 __activetblptr 000002               ?_read_eeprom_data 0056               motor_disable@unit 006A  
               __CFG_CCP2MX$RC1 000000                 ??_get_step_mode 006B            __end_of_chksum_check 089C  
            ??_read_eeprom_data 0064                  _total_1ms_tick 006C                          _EEDATA 000FA8  
                        _EECON2 000FA7                __end_of_WriteSPI 0A06           write_eeprom_data@addr 0065  
                        _OSCCON 000FD3           write_eeprom_data@data 0064                    ?_set_adc_out 0056  
                        _SSPBUF 000FC9                    ?_set_abs_pos 0056            __size_of_get_adc_out 0018  
              __end_of_delay_us 0866            __size_of_get_abs_pos 0018                       ??_OpenSPI 0066  
                __CFG_XINST$OFF 000000                __end_of_get_mark 0AE2                __end_of_high_isr 0094  
              __end_of_get_tval 0A3A            __end_of_get_alarm_en 0B2A                          _chksum 0022  
                get_ocd_th@unit 006B                    ?_set_ton_min 0056                          _param1 002A  
                        _param2 002B                          _param3 002C                          _offset 0029  
                        clear_0 081C                          _spi_rx 0016                          _spi_tx 001A  
          __size_of_get_ton_min 0018                 WriteSPI@TempVar 0064               _write_eeprom_data 0956  
      __size_of_write_spi_chain 0084                    __pdataCOMRAM 0031                __end_of_set_mark 092A  
                    L6474@value 0021              ?_write_eeprom_data 0064                __end_of_set_tval 0B72  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
           ??_write_eeprom_data 0065            __end_of_get_toff_min 0A6A                      __accesstop 0080  
       __end_of__initialization 0822                 __CFG_PBADEN$DIG 000000      read_spi_chain@num_response 006A  
                 ___rparam_used 000001         __size_of_reset_position 001C                  __pcstackCOMRAM 0056  
       ??_read_spi_chain_single 0068       __end_of_write_eeprom_data 097E                  get_t_fast@unit 006B  
              get_alarm_en@unit 006B                set_alarm_en@unit 006A               ?_copy_from_eeprom 0056  
               __CFG_OSC$INTIO2 000000              ??_copy_from_eeprom 006B           __end_of_set_step_mode 0BD2  
                    __pnvCOMRAM 006C           __end_of_motor_disable 0C56                       ?_WriteSPI 0056  
         __size_of_chksum_check 0036              __size_of_uart_getc 000C                __CFG_BBSIZ$BB256 000000  
            __size_of_uart_putc 0010                      _get_el_pos 0AE2                      _get_config 0AFA  
                    _get_ocd_th 0AB2                       ?_delay_us 0064                      _get_t_fast 0A6A  
     read_spi_chain_single@unit 0068                         _OSCTUNE 000F9B               ??_write_spi_chain 0069  
                    _get_status 0A9A                         _SSPCON1 000FC6                       ?_get_mark 0056  
                     ?_high_isr 0056                 set_ton_min@unit 006A                         _SSPSTAT 000FC7  
                     ?_get_tval 0056                   ?_set_alarm_en 0056                      _led_status 0025  
                set_el_pos@unit 006A           __size_of_get_alarm_en 0018            __size_of_set_adc_out 0018  
                       _OpenSPI 074C                         __Hparam 0000            __size_of_set_abs_pos 002C  
                       __Lparam 0000                       ?_set_mark 0056                       ?_set_tval 0056  
                  _chksum_check 0866                  set_config@unit 006A      __size_of_write_eeprom_data 0028  
               __CFG_STVREN$OFF 000000                         __pcinit 07F6                         __ramtop 0200  
                    ??_WriteSPI 0064                         __ptext0 0098                         __ptext1 0956  
                       __ptext2 0C1A                         __ptext3 0C56                         __ptext4 0A06  
                       __ptext5 0C3A                         __ptext6 0C48                         __ptext7 0A22  
                       __ptext8 0A3A                         __ptext9 0A52                   ?_set_toff_min 0056  
                     _T0CONbits 000FD5            __size_of_set_ton_min 0018                       _T1CONbits 000FCD  
                    ??_delay_us 0066           __size_of_get_toff_min 0018                   ?_motor_enable 0056  
                    ??_get_mark 006B                    _get_alarm_en 0B12                      ??_high_isr 0056  
                ??_set_alarm_en 006A                      ??_get_tval 006B            end_of_initialization 0822  
                 ??_blank_check 0065               _get_eeprom_offset 089C                   __Lmediumconst 0000  
     __size_of_read_eeprom_data 0010               __end_of_uart_getc 0C62              ?_get_eeprom_offset 0056  
                set_ocd_th@unit 006A                  get_status@unit 006B               __end_of_uart_putc 0C2A  
                    _set_el_pos 09A4                      _set_config 09C6                  _reset_position 0A06  
                    ??_set_mark 006A                      _set_ocd_th 0BD2                      ??_set_tval 006A  
                    _set_t_fast 0BA2                       _RCSTAbits 000FAB                         postdec1 000FE5  
              WriteSPI@data_out 0065                         postinc0 000FEE                 set_adc_out@unit 006A  
           ??_get_eeprom_offset 0064                      _motor_unit 0027                    _get_toff_min 0A52  
                ??_set_toff_min 006A                       _PORTCbits 000F82                     ?_get_el_pos 0056  
                   ?_get_config 0056                     ?_get_ocd_th 0056                  ??_motor_enable 006A  
                     _TRISAbits 000F92                       _TRISCbits 000F94                     ?_get_t_fast 0056  
                   ?_get_status 0056           __end_of_get_step_mode 0A9A       __end_of_get_eeprom_offset 08CE  
                 ??_get_adc_out 006B                   ??_get_abs_pos 006B                       _TXSTAbits 000FAC  
        __end_of_reset_position 0A22         __size_of_read_spi_chain 0050                  set_t_fast@unit 006A  
           __end_of_blank_check 08FE                   ??_get_ton_min 006B              reset_position@unit 006B  
                   _BAUDCONbits 000FB8  __size_of_read_spi_chain_single 008E                   __pidataCOMRAM 097E  
 __end_of_read_spi_chain_single 06C8                OpenSPI@smp_phase 0065                   _default_value 0031  
          read_eeprom_data@addr 0064             start_initialization 07F6                 set_abs_pos@unit 006A  
              OpenSPI@sync_mode 0066       __size_of_copy_from_eeprom 0122                 ?_reset_position 0056  
         get_eeprom_offset@unit 0064                     ?_set_el_pos 0056                     ?_set_config 0056  
           __end_of_get_adc_out 0B42                     ?_set_ocd_th 0056             __size_of_get_el_pos 0018  
           __size_of_get_config 0018             __end_of_get_abs_pos 0B5A                     ?_set_t_fast 0056  
           __size_of_get_ocd_th 0018             __size_of_get_t_fast 0018               get_step_mode@unit 006B  
             set_step_mode@unit 006A             __size_of_get_status 0018                __CFG_LPT1OSC$OFF 000000  
          __end_of_set_alarm_en 0C02                 _write_spi_chain 06C8             __end_of_get_ton_min 0A52  
             __size_of_WriteSPI 001E                     __pbssCOMRAM 0001                get_toff_min@unit 006B  
              set_toff_min@unit 006A               __size_of_delay_us 0036      __size_of_get_eeprom_offset 0032  
                   _blank_check 08CE               __size_of_get_mark 0018               __size_of_high_isr 008C  
             __size_of_get_tval 0018            __end_of_set_toff_min 0BA2                _read_eeprom_data 0C2A  
                      ?_OpenSPI 0064            __end_of_motor_enable 0C48                       __pintcode 0008  
             __size_of_set_mark 002C               __size_of_set_tval 0018                       _led_timer 001E  
        __size_of_set_step_mode 0018             __size_of_set_el_pos 0022             __size_of_set_config 0022  
           __size_of_set_ocd_th 0018             __size_of_set_t_fast 0018          __size_of_motor_disable 000E  
                   _get_adc_out 0B2A                   ??_set_adc_out 006A                     _get_abs_pos 0B42  
                 ??_set_abs_pos 006A                       delay_us@n 0066                        _PIE1bits 000F9D  
                _read_spi_chain 07A6                        _PIR1bits 000F9E                        _PIR2bits 000FA1  
       __end_of_write_spi_chain 074C                        _RCONbits 000FD0                __CFG_WDTPS$32768 000000  
                    uart_getc@c 0064                       _uart_getc 0C56                       _uart_putc 0C1A  
                   _get_ton_min 0A3A                   ??_set_ton_min 006A                 OpenSPI@bus_mode 0064  
                    _ADCON1bits 000FC1                       _rx_packet 0001                    ??_get_el_pos 006B  
                  ??_get_config 006B                    ??_get_ocd_th 006B                    ??_get_t_fast 006B  
                  ??_get_status 006B                       copy_data0 080A            copy_from_eeprom@unit 006B  
                  delay_us@usec 0064          __end_of_read_spi_chain 07F6                _copy_from_eeprom 0518  
                 _set_step_mode 0BBA                      _EECON1bits 000FA6                        __Hrparam 0000  
         __size_of_set_alarm_en 0018                        __Lrparam 0000                __size_of_OpenSPI 005A  
           __end_of_set_adc_out 0C1A              __end_of_get_el_pos 0AFA             __end_of_set_abs_pos 0956  
            __end_of_get_config 0B12                      ?_uart_getc 0056              __end_of_get_ocd_th 0ACA  
                 _motor_enabled 0026                      ?_uart_putc 0056                   _motor_disable 0C48  
            __end_of_get_t_fast 0A82                   uart_p2x@F2625 0046              __end_of_get_status 0AB2  
                      _WriteSPI 09E8             __end_of_set_ton_min 0B8A                        _delay_us 0830  
                      __ptext10 0A6A                        __ptext11 0A82                        __ptext20 07A6  
                      __ptext12 0A9A                        __ptext21 063A                        __ptext13 0AB2  
                      __ptext30 09A4                        __ptext22 0518                        __ptext14 0ACA  
                      __ptext31 09C6                        __ptext23 0B5A                        __ptext15 0AE2  
                      __ptext40 0C2A                        __ptext32 0BEA                        __ptext24 0B72  
                      __ptext16 0AFA                        __ptext41 089C                        __ptext33 0C02  
                      __ptext25 0B8A                        __ptext17 0B12                        __ptext42 074C  
                      __ptext34 092A                        __ptext26 0BA2                        __ptext18 0B2A  
                      __ptext35 06C8                        __ptext27 0BBA                        __ptext19 0B42  
                      __ptext36 0830                        __ptext28 0BD2                        __ptext37 09E8  
                      __ptext29 08FE                        __ptext38 0866                        __ptext39 08CE  
         __size_of_set_toff_min 0018                        _get_mark 0ACA                        _high_isr 0008  
                      _get_tval 0A22                ??_reset_position 006B                    _set_alarm_en 0BEA  
               blank_check@unit 0065                 ?_read_spi_chain 0069                  ?_set_step_mode 0056  
                 __size_of_main 0480           __size_of_motor_enable 000E              read_spi_chain@unit 0069  
                  ??_set_el_pos 006A                    ??_set_config 006A                    set_mark@unit 006A  
                  ??_set_ocd_th 006A                        _set_mark 08FE                    ??_set_t_fast 006A  
                      _set_tval 0B5A                ?_write_spi_chain 0068                  ?_motor_disable 0056  
                      int$flags 006E                 get_ton_min@unit 006B                        _rx_index 002E  
        __size_of_get_step_mode 0018                    _set_toff_min 0B8A        __end_of_read_eeprom_data 0C3A  
         _read_spi_chain_single 063A                      _INTCONbits 000FF2                   _eeprom_offset 0023  
                  _motor_enable 0C3A              __end_of_set_el_pos 09C6              __end_of_set_config 09E8  
            __end_of_set_ocd_th 0BEA              __end_of_set_t_fast 0BBA                        intlevel2 0000  
                  ?_blank_check 0056                     _set_adc_out 0C02                    set_tval@unit 006A  
                   _set_abs_pos 092A                   ?_chksum_check 0056                     ??_uart_getc 0064  
                   ??_uart_putc 0064                     _set_ton_min 0B72                     _SSPCON1bits 000FC6  
               get_adc_out@unit 006B                   ?_get_alarm_en 0056                   _get_step_mode 0A82  
               ??_set_step_mode 006A                   uart_putc@byte 0064                    ?_get_adc_out 0056  
                  ?_get_abs_pos 0056                 ??_motor_disable 006A                  ??_chksum_check 0065  
